
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000061c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006d4  080006d4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006d4  080006d4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080006d4  080006d4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d4  080006d4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080006dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  080006e4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080006e4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f9d  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a34  00000000  00000000  00022fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00023c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c2a  00000000  00000000  00023e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b1b  00000000  00000000  00036a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000773e2  00000000  00000000  00039585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b0967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b0  00000000  00000000  000b09bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000008 	.word	0x20000008
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080006bc 	.word	0x080006bc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000000c 	.word	0x2000000c
 80000fc:	080006bc 	.word	0x080006bc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	0002      	movs	r2, r0
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b7f      	cmp	r3, #127	; 0x7f
 800022a:	d809      	bhi.n	8000240 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	001a      	movs	r2, r3
 8000232:	231f      	movs	r3, #31
 8000234:	401a      	ands	r2, r3
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <__NVIC_EnableIRQ+0x30>)
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	000a      	movs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b7f      	cmp	r3, #127	; 0x7f
 8000260:	d828      	bhi.n	80002b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000262:	4a2f      	ldr	r2, [pc, #188]	; (8000320 <__NVIC_SetPriority+0xd4>)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	b25b      	sxtb	r3, r3
 800026a:	089b      	lsrs	r3, r3, #2
 800026c:	33c0      	adds	r3, #192	; 0xc0
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	589b      	ldr	r3, [r3, r2]
 8000272:	1dfa      	adds	r2, r7, #7
 8000274:	7812      	ldrb	r2, [r2, #0]
 8000276:	0011      	movs	r1, r2
 8000278:	2203      	movs	r2, #3
 800027a:	400a      	ands	r2, r1
 800027c:	00d2      	lsls	r2, r2, #3
 800027e:	21ff      	movs	r1, #255	; 0xff
 8000280:	4091      	lsls	r1, r2
 8000282:	000a      	movs	r2, r1
 8000284:	43d2      	mvns	r2, r2
 8000286:	401a      	ands	r2, r3
 8000288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	019b      	lsls	r3, r3, #6
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	401a      	ands	r2, r3
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	0018      	movs	r0, r3
 8000298:	2303      	movs	r3, #3
 800029a:	4003      	ands	r3, r0
 800029c:	00db      	lsls	r3, r3, #3
 800029e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a0:	481f      	ldr	r0, [pc, #124]	; (8000320 <__NVIC_SetPriority+0xd4>)
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	430a      	orrs	r2, r1
 80002ac:	33c0      	adds	r3, #192	; 0xc0
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b2:	e031      	b.n	8000318 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <__NVIC_SetPriority+0xd8>)
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0019      	movs	r1, r3
 80002bc:	230f      	movs	r3, #15
 80002be:	400b      	ands	r3, r1
 80002c0:	3b08      	subs	r3, #8
 80002c2:	089b      	lsrs	r3, r3, #2
 80002c4:	3306      	adds	r3, #6
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	18d3      	adds	r3, r2, r3
 80002ca:	3304      	adds	r3, #4
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1dfa      	adds	r2, r7, #7
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	0011      	movs	r1, r2
 80002d4:	2203      	movs	r2, #3
 80002d6:	400a      	ands	r2, r1
 80002d8:	00d2      	lsls	r2, r2, #3
 80002da:	21ff      	movs	r1, #255	; 0xff
 80002dc:	4091      	lsls	r1, r2
 80002de:	000a      	movs	r2, r1
 80002e0:	43d2      	mvns	r2, r2
 80002e2:	401a      	ands	r2, r3
 80002e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	019b      	lsls	r3, r3, #6
 80002ea:	22ff      	movs	r2, #255	; 0xff
 80002ec:	401a      	ands	r2, r3
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	0018      	movs	r0, r3
 80002f4:	2303      	movs	r3, #3
 80002f6:	4003      	ands	r3, r0
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	4809      	ldr	r0, [pc, #36]	; (8000324 <__NVIC_SetPriority+0xd8>)
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	001c      	movs	r4, r3
 8000304:	230f      	movs	r3, #15
 8000306:	4023      	ands	r3, r4
 8000308:	3b08      	subs	r3, #8
 800030a:	089b      	lsrs	r3, r3, #2
 800030c:	430a      	orrs	r2, r1
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18c3      	adds	r3, r0, r3
 8000314:	3304      	adds	r3, #4
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	e000e100 	.word	0xe000e100
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	2380      	movs	r3, #128	; 0x80
 8000336:	045b      	lsls	r3, r3, #17
 8000338:	429a      	cmp	r2, r3
 800033a:	d301      	bcc.n	8000340 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033c:	2301      	movs	r3, #1
 800033e:	e010      	b.n	8000362 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <SysTick_Config+0x44>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	3a01      	subs	r2, #1
 8000346:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000348:	2301      	movs	r3, #1
 800034a:	425b      	negs	r3, r3
 800034c:	2103      	movs	r1, #3
 800034e:	0018      	movs	r0, r3
 8000350:	f7ff ff7c 	bl	800024c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Config+0x44>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SysTick_Config+0x44>)
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000360:	2300      	movs	r3, #0
}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b002      	add	sp, #8
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	e000e010 	.word	0xe000e010

08000370 <system_init>:

#define LEDDELAY    160000

static volatile uint32_t tick = 0;

void system_init(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	46c0      	nop			; (mov r8, r8)

	__disable_irq();
	onboardLed_Set();
 8000378:	f000 f81a 	bl	80003b0 <onboardLed_Set>
	button_set();
 800037c:	f000 f836 	bl	80003ec <button_set>
	SysTick_Config(SystemCoreClock / 1000);
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <system_init+0x3c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	22fa      	movs	r2, #250	; 0xfa
 8000386:	0091      	lsls	r1, r2, #2
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff feb9 	bl	8000100 <__udivsi3>
 800038e:	0003      	movs	r3, r0
 8000390:	0018      	movs	r0, r3
 8000392:	f7ff ffc9 	bl	8000328 <SysTick_Config>
	UART_init(9600);
 8000396:	2396      	movs	r3, #150	; 0x96
 8000398:	019b      	lsls	r3, r3, #6
 800039a:	0018      	movs	r0, r3
 800039c:	f000 f878 	bl	8000490 <UART_init>
  __ASM volatile ("cpsie i" : : : "memory");
 80003a0:	b662      	cpsie	i
}
 80003a2:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000000 	.word	0x20000000

080003b0 <onboardLed_Set>:


//INITILIZE ONBOARD LED CONNECTED TO PC6 PIN AND CONFIGURATION
void onboardLed_Set(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    /* Enable GPIOC clock */
    RCC->IOPENR |= (1U << 2);
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <onboardLed_Set+0x30>)
 80003b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <onboardLed_Set+0x30>)
 80003ba:	2104      	movs	r1, #4
 80003bc:	430a      	orrs	r2, r1
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup PC6 as output for onboard led*/
    GPIOC->MODER &= ~(3U << 2*6);
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <onboardLed_Set+0x34>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <onboardLed_Set+0x34>)
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <onboardLed_Set+0x38>)
 80003c8:	400a      	ands	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (1U << 2*6);
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <onboardLed_Set+0x34>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <onboardLed_Set+0x34>)
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	0149      	lsls	r1, r1, #5
 80003d6:	430a      	orrs	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	50000800 	.word	0x50000800
 80003e8:	ffffcfff 	.word	0xffffcfff

080003ec <button_set>:
}


//INITILIZE BUTTON CONNECTED TO PA5 PIN

void button_set(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    /* Enable GPIOA clock */
    RCC->IOPENR |= (1U << 0);
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <button_set+0x28>)
 80003f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <button_set+0x28>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	430a      	orrs	r2, r1
 80003fa:	635a      	str	r2, [r3, #52]	; 0x34
	//Set PA5 as input
	GPIOA->MODER &= ~(3U << 2*5);
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	23a0      	movs	r3, #160	; 0xa0
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	4904      	ldr	r1, [pc, #16]	; (8000418 <button_set+0x2c>)
 8000408:	400a      	ands	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40021000 	.word	0x40021000
 8000418:	fffff3ff 	.word	0xfffff3ff

0800041c <USART2_IRQHandler>:
	NVIC_SetPriority(EXTI4_15_IRQn, 0);
	NVIC_EnableIRQ(EXTI4_15_IRQn);
}

//UART MEVZULARI
void USART2_IRQHandler(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
	uint8_t data = (uint8_t)USART2->RDR;
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <USART2_IRQHandler+0x20>)
 8000424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000426:	1dfb      	adds	r3, r7, #7
 8000428:	701a      	strb	r2, [r3, #0]
	uart_tx(data);
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f806 	bl	8000440 <uart_tx>
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40004400 	.word	0x40004400

08000440 <uart_tx>:


void uart_tx(uint8_t c){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	0002      	movs	r2, r0
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	701a      	strb	r2, [r3, #0]

	USART2->TDR = (uint16_t)c;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <uart_tx+0x2c>)
 800044e:	1dfa      	adds	r2, r7, #7
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USART2->ISR & (1U << 6)));
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <uart_tx+0x2c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	2240      	movs	r2, #64	; 0x40
 800045c:	4013      	ands	r3, r2
 800045e:	d0fa      	beq.n	8000456 <uart_tx+0x16>
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40004400 	.word	0x40004400

08000470 <uart_rx>:

uint8_t uart_rx(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0

	while(!((USART2->ISR) & (1U << 5)));
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <uart_rx+0x1c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	2220      	movs	r2, #32
 800047c:	4013      	ands	r3, r2
 800047e:	d0fa      	beq.n	8000476 <uart_rx+0x6>

	return (uint8_t)USART2->RDR;
 8000480:	4b02      	ldr	r3, [pc, #8]	; (800048c <uart_rx+0x1c>)
 8000482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000484:	b2db      	uxtb	r3, r3

	//RXNE AUTOMATICALLY CLEARED WHEN ITS READ
}
 8000486:	0018      	movs	r0, r3
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40004400 	.word	0x40004400

08000490 <UART_init>:


void UART_init(uint32_t baud){
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	RCC->IOPENR |= (1U << 0);
 8000498:	4b3f      	ldr	r3, [pc, #252]	; (8000598 <UART_init+0x108>)
 800049a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049c:	4b3e      	ldr	r3, [pc, #248]	; (8000598 <UART_init+0x108>)
 800049e:	2101      	movs	r1, #1
 80004a0:	430a      	orrs	r2, r1
 80004a2:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR1 |= (1U << 17); //	RCC->APBENR1 |= (1U << RCC_APBENR1_USART2EN);
 80004a4:	4b3c      	ldr	r3, [pc, #240]	; (8000598 <UART_init+0x108>)
 80004a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004a8:	4b3b      	ldr	r3, [pc, #236]	; (8000598 <UART_init+0x108>)
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	0289      	lsls	r1, r1, #10
 80004ae:	430a      	orrs	r2, r1
 80004b0:	63da      	str	r2, [r3, #60]	; 0x3c

	//SET PA2 AS ALTERNATE FUNCTION(AF1)
	GPIOA->MODER &= ~(3U << 2*2);
 80004b2:	23a0      	movs	r3, #160	; 0xa0
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2130      	movs	r1, #48	; 0x30
 80004be:	438a      	bics	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*2);
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2120      	movs	r1, #32
 80004ce:	430a      	orrs	r2, r1
 80004d0:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] &= ~(0XFU << 4*2);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	6a1a      	ldr	r2, [r3, #32]
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	492f      	ldr	r1, [pc, #188]	; (800059c <UART_init+0x10c>)
 80004de:	400a      	ands	r2, r1
 80004e0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1U << 4*2);  //0001 for AF1
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	6a1a      	ldr	r2, [r3, #32]
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0049      	lsls	r1, r1, #1
 80004f0:	430a      	orrs	r2, r1
 80004f2:	621a      	str	r2, [r3, #32]

	//SET PA3 AS ALTERNATE FUNCTION(AF1)
	GPIOA->MODER &= ~(3U << 2*3);
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	21c0      	movs	r1, #192	; 0xc0
 8000500:	438a      	bics	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*3);
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] &= ~(0XFU << 4*3);
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	6a1a      	ldr	r2, [r3, #32]
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	4920      	ldr	r1, [pc, #128]	; (80005a0 <UART_init+0x110>)
 8000520:	400a      	ands	r2, r1
 8000522:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1U << 4*3);  //0001 for AF1
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	6a1a      	ldr	r2, [r3, #32]
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0149      	lsls	r1, r1, #5
 8000532:	430a      	orrs	r2, r1
 8000534:	621a      	str	r2, [r3, #32]

	//SETUP UART
	USART2->CR1 = 0;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <UART_init+0x114>)
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1 << 3); //TE
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <UART_init+0x114>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <UART_init+0x114>)
 8000542:	2108      	movs	r1, #8
 8000544:	430a      	orrs	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1 << 2); //RE
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <UART_init+0x114>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <UART_init+0x114>)
 800054e:	2104      	movs	r1, #4
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1 << 5); //RXNEIE
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <UART_init+0x114>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <UART_init+0x114>)
 800055a:	2120      	movs	r1, #32
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]

	USART2->BRR = (uint16_t)(SystemCoreClock / baud);
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <UART_init+0x118>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff fdca 	bl	8000100 <__udivsi3>
 800056c:	0003      	movs	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <UART_init+0x114>)
 8000572:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= (1 << 0); //UE
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <UART_init+0x114>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <UART_init+0x114>)
 800057a:	2101      	movs	r1, #1
 800057c:	430a      	orrs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART2_IRQn, 1);
 8000580:	2101      	movs	r1, #1
 8000582:	201c      	movs	r0, #28
 8000584:	f7ff fe62 	bl	800024c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8000588:	201c      	movs	r0, #28
 800058a:	f7ff fe45 	bl	8000218 <__NVIC_EnableIRQ>
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	40021000 	.word	0x40021000
 800059c:	fffff0ff 	.word	0xfffff0ff
 80005a0:	ffff0fff 	.word	0xffff0fff
 80005a4:	40004400 	.word	0x40004400
 80005a8:	20000000 	.word	0x20000000

080005ac <main>:
#include "bsp.h"

#define LEDDELAY    160000
void delay(volatile uint32_t);

int main(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	system_init();
 80005b0:	f7ff fede 	bl	8000370 <system_init>


	while(1){
		uart_tx(uart_rx());
 80005b4:	f7ff ff5c 	bl	8000470 <uart_rx>
 80005b8:	0003      	movs	r3, r0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff ff40 	bl	8000440 <uart_tx>
 80005c0:	e7f8      	b.n	80005b4 <main+0x8>

080005c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <NMI_Handler+0x4>

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <HardFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e6:	f000 f833 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000600:	f7ff fff6 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062a:	f000 f823 	bl	8000674 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800062e:	f7ff ffbd 	bl	80005ac <main>

08000632 <LoopForever>:

LoopForever:
  b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   r0, =_estack
 8000634:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000640:	080006dc 	.word	0x080006dc
  ldr r2, =_sbss
 8000644:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000648:	20000028 	.word	0x20000028

0800064c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_IRQHandler>
	...

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x1c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	001a      	movs	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x20>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	18d2      	adds	r2, r2, r3
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_IncTick+0x20>)
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	20000004 	.word	0x20000004
 8000670:	20000024 	.word	0x20000024

08000674 <__libc_init_array>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2600      	movs	r6, #0
 8000678:	4d0c      	ldr	r5, [pc, #48]	; (80006ac <__libc_init_array+0x38>)
 800067a:	4c0d      	ldr	r4, [pc, #52]	; (80006b0 <__libc_init_array+0x3c>)
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	42a6      	cmp	r6, r4
 8000682:	d109      	bne.n	8000698 <__libc_init_array+0x24>
 8000684:	2600      	movs	r6, #0
 8000686:	f000 f819 	bl	80006bc <_init>
 800068a:	4d0a      	ldr	r5, [pc, #40]	; (80006b4 <__libc_init_array+0x40>)
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <__libc_init_array+0x44>)
 800068e:	1b64      	subs	r4, r4, r5
 8000690:	10a4      	asrs	r4, r4, #2
 8000692:	42a6      	cmp	r6, r4
 8000694:	d105      	bne.n	80006a2 <__libc_init_array+0x2e>
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	00b3      	lsls	r3, r6, #2
 800069a:	58eb      	ldr	r3, [r5, r3]
 800069c:	4798      	blx	r3
 800069e:	3601      	adds	r6, #1
 80006a0:	e7ee      	b.n	8000680 <__libc_init_array+0xc>
 80006a2:	00b3      	lsls	r3, r6, #2
 80006a4:	58eb      	ldr	r3, [r5, r3]
 80006a6:	4798      	blx	r3
 80006a8:	3601      	adds	r6, #1
 80006aa:	e7f2      	b.n	8000692 <__libc_init_array+0x1e>
 80006ac:	080006d4 	.word	0x080006d4
 80006b0:	080006d4 	.word	0x080006d4
 80006b4:	080006d4 	.word	0x080006d4
 80006b8:	080006d8 	.word	0x080006d8

080006bc <_init>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr

080006c8 <_fini>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr
