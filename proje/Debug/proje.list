
proje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001054  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001150  08001150  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001150  08001150  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001150  08001150  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001150  08001150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001158  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  0800115c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800115c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003806  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c0c  00000000  00000000  00023832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00024440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  000246e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014114  00000000  00000000  00024928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000353b  00000000  00000000  00038a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a1a  00000000  00000000  0003bf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007b0  00000000  00000000  000bc9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080010f8 	.word	0x080010f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080010f8 	.word	0x080010f8

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <setRCCForKeypad>:
typedef enum keypadButton{keypadBut0 = 0, keypadBut1, keypadBut2, keypadBut3, keypadBut4,
	keypadBut5, keypadBut6, keypadBut7, keypadBut8, keypadBut9, keypadButA,
	keypadButB, keypadButC, keypadButD, keypadButHash, keypadButAst, none} keypadBut_t;


void setRCCForKeypad() {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	// A ve B pinlerini aç
	RCC -> IOPENR |= (3U);
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <setRCCForKeypad+0x18>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <setRCCForKeypad+0x18>)
 800021e:	2103      	movs	r1, #3
 8000220:	430a      	orrs	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	40021000 	.word	0x40021000

08000230 <setMODERForKeypad>:

void setMODERForKeypad() {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	// ROW AYARLARI
	GPIOB -> MODER &= ~(3U << 4*2);
 8000234:	4b36      	ldr	r3, [pc, #216]	; (8000310 <setMODERForKeypad+0xe0>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b35      	ldr	r3, [pc, #212]	; (8000310 <setMODERForKeypad+0xe0>)
 800023a:	4936      	ldr	r1, [pc, #216]	; (8000314 <setMODERForKeypad+0xe4>)
 800023c:	400a      	ands	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 4*2);
 8000240:	4b33      	ldr	r3, [pc, #204]	; (8000310 <setMODERForKeypad+0xe0>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b32      	ldr	r3, [pc, #200]	; (8000310 <setMODERForKeypad+0xe0>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0049      	lsls	r1, r1, #1
 800024a:	430a      	orrs	r2, r1
 800024c:	601a      	str	r2, [r3, #0]

	GPIOB -> MODER &= ~(3U << 5*2);
 800024e:	4b30      	ldr	r3, [pc, #192]	; (8000310 <setMODERForKeypad+0xe0>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <setMODERForKeypad+0xe0>)
 8000254:	4930      	ldr	r1, [pc, #192]	; (8000318 <setMODERForKeypad+0xe8>)
 8000256:	400a      	ands	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 5*2);
 800025a:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <setMODERForKeypad+0xe0>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <setMODERForKeypad+0xe0>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	00c9      	lsls	r1, r1, #3
 8000264:	430a      	orrs	r2, r1
 8000266:	601a      	str	r2, [r3, #0]

	GPIOB -> MODER &= ~(3U << 9*2);
 8000268:	4b29      	ldr	r3, [pc, #164]	; (8000310 <setMODERForKeypad+0xe0>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b28      	ldr	r3, [pc, #160]	; (8000310 <setMODERForKeypad+0xe0>)
 800026e:	492b      	ldr	r1, [pc, #172]	; (800031c <setMODERForKeypad+0xec>)
 8000270:	400a      	ands	r2, r1
 8000272:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 9*2);
 8000274:	4b26      	ldr	r3, [pc, #152]	; (8000310 <setMODERForKeypad+0xe0>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b25      	ldr	r3, [pc, #148]	; (8000310 <setMODERForKeypad+0xe0>)
 800027a:	2180      	movs	r1, #128	; 0x80
 800027c:	02c9      	lsls	r1, r1, #11
 800027e:	430a      	orrs	r2, r1
 8000280:	601a      	str	r2, [r3, #0]

	GPIOB -> MODER &= ~(3U << 8*2);
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <setMODERForKeypad+0xe0>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <setMODERForKeypad+0xe0>)
 8000288:	4925      	ldr	r1, [pc, #148]	; (8000320 <setMODERForKeypad+0xf0>)
 800028a:	400a      	ands	r2, r1
 800028c:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 8*2);
 800028e:	4b20      	ldr	r3, [pc, #128]	; (8000310 <setMODERForKeypad+0xe0>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <setMODERForKeypad+0xe0>)
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	0249      	lsls	r1, r1, #9
 8000298:	430a      	orrs	r2, r1
 800029a:	601a      	str	r2, [r3, #0]

	//COLUMN (INPUT) AYARLARI
	GPIOB -> MODER &= ~(3U << 8*2);
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <setMODERForKeypad+0xe0>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <setMODERForKeypad+0xe0>)
 80002a2:	491f      	ldr	r1, [pc, #124]	; (8000320 <setMODERForKeypad+0xf0>)
 80002a4:	400a      	ands	r2, r1
 80002a6:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= ~(3U << 2*2);
 80002a8:	4b19      	ldr	r3, [pc, #100]	; (8000310 <setMODERForKeypad+0xe0>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <setMODERForKeypad+0xe0>)
 80002ae:	2130      	movs	r1, #48	; 0x30
 80002b0:	438a      	bics	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= ~(3U << 0*2);
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <setMODERForKeypad+0xe0>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <setMODERForKeypad+0xe0>)
 80002ba:	2103      	movs	r1, #3
 80002bc:	438a      	bics	r2, r1
 80002be:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER &= ~(3U << 9*2);
 80002c0:	23a0      	movs	r3, #160	; 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	23a0      	movs	r3, #160	; 0xa0
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	4914      	ldr	r1, [pc, #80]	; (800031c <setMODERForKeypad+0xec>)
 80002cc:	400a      	ands	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]

	//COLUMN PUPDR AYARLARI
	GPIOB -> PUPDR |= (2U << 8*2);
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <setMODERForKeypad+0xe0>)
 80002d2:	68da      	ldr	r2, [r3, #12]
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <setMODERForKeypad+0xe0>)
 80002d6:	2180      	movs	r1, #128	; 0x80
 80002d8:	0289      	lsls	r1, r1, #10
 80002da:	430a      	orrs	r2, r1
 80002dc:	60da      	str	r2, [r3, #12]
	GPIOB -> PUPDR |= (2U << 2*2);
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <setMODERForKeypad+0xe0>)
 80002e0:	68da      	ldr	r2, [r3, #12]
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <setMODERForKeypad+0xe0>)
 80002e4:	2120      	movs	r1, #32
 80002e6:	430a      	orrs	r2, r1
 80002e8:	60da      	str	r2, [r3, #12]
	GPIOB -> PUPDR |= (2U << 0*2);
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <setMODERForKeypad+0xe0>)
 80002ec:	68da      	ldr	r2, [r3, #12]
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <setMODERForKeypad+0xe0>)
 80002f0:	2102      	movs	r1, #2
 80002f2:	430a      	orrs	r2, r1
 80002f4:	60da      	str	r2, [r3, #12]
	GPIOA -> PUPDR |= (2U << 9*2);
 80002f6:	23a0      	movs	r3, #160	; 0xa0
 80002f8:	05db      	lsls	r3, r3, #23
 80002fa:	68da      	ldr	r2, [r3, #12]
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0309      	lsls	r1, r1, #12
 8000304:	430a      	orrs	r2, r1
 8000306:	60da      	str	r2, [r3, #12]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	50000400 	.word	0x50000400
 8000314:	fffffcff 	.word	0xfffffcff
 8000318:	fffff3ff 	.word	0xfffff3ff
 800031c:	fff3ffff 	.word	0xfff3ffff
 8000320:	fffcffff 	.word	0xfffcffff

08000324 <setInterruptForKeypad>:

void setInterruptForKeypad(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	// C1 -> PB8
	EXTI -> EXTICR[2] |= (1U << 0*8);
 8000328:	4b35      	ldr	r3, [pc, #212]	; (8000400 <setInterruptForKeypad+0xdc>)
 800032a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800032c:	4b34      	ldr	r3, [pc, #208]	; (8000400 <setInterruptForKeypad+0xdc>)
 800032e:	2101      	movs	r1, #1
 8000330:	430a      	orrs	r2, r1
 8000332:	669a      	str	r2, [r3, #104]	; 0x68

	// C2 -> PB2
	EXTI -> EXTICR[0] |= (1U << 2*8);
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000336:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000338:	4b31      	ldr	r3, [pc, #196]	; (8000400 <setInterruptForKeypad+0xdc>)
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	0249      	lsls	r1, r1, #9
 800033e:	430a      	orrs	r2, r1
 8000340:	661a      	str	r2, [r3, #96]	; 0x60

	// C3 -> PB0
	EXTI -> EXTICR[0] |= (1U << 0*8);
 8000342:	4b2f      	ldr	r3, [pc, #188]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000348:	2101      	movs	r1, #1
 800034a:	430a      	orrs	r2, r1
 800034c:	661a      	str	r2, [r3, #96]	; 0x60

	// C4 -> PA9
	EXTI -> EXTICR[2] |= (0U << 1*8);
 800034e:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000352:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000354:	669a      	str	r2, [r3, #104]	; 0x68

	EXTI -> RTSR1 |= (1U << 9);
 8000356:	4b2a      	ldr	r3, [pc, #168]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b29      	ldr	r3, [pc, #164]	; (8000400 <setInterruptForKeypad+0xdc>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	0089      	lsls	r1, r1, #2
 8000360:	430a      	orrs	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
	EXTI -> RTSR1 |= (1U << 0);
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <setInterruptForKeypad+0xdc>)
 800036a:	2101      	movs	r1, #1
 800036c:	430a      	orrs	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
	EXTI -> RTSR1 |= (1U << 2);
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b22      	ldr	r3, [pc, #136]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000376:	2104      	movs	r1, #4
 8000378:	430a      	orrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
	EXTI -> RTSR1 |= (1U << 8);
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <setInterruptForKeypad+0xdc>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	0049      	lsls	r1, r1, #1
 8000386:	430a      	orrs	r2, r1
 8000388:	601a      	str	r2, [r3, #0]

	EXTI -> IMR1 |= (1U << 9);
 800038a:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <setInterruptForKeypad+0xdc>)
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	58d3      	ldr	r3, [r2, r3]
 8000390:	491b      	ldr	r1, [pc, #108]	; (8000400 <setInterruptForKeypad+0xdc>)
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	4313      	orrs	r3, r2
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	508b      	str	r3, [r1, r2]
	EXTI -> IMR1 |= (1U << 0);
 800039c:	4a18      	ldr	r2, [pc, #96]	; (8000400 <setInterruptForKeypad+0xdc>)
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	58d3      	ldr	r3, [r2, r3]
 80003a2:	4917      	ldr	r1, [pc, #92]	; (8000400 <setInterruptForKeypad+0xdc>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	4313      	orrs	r3, r2
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	508b      	str	r3, [r1, r2]
	EXTI -> IMR1 |= (1U << 2);
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <setInterruptForKeypad+0xdc>)
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	58d3      	ldr	r3, [r2, r3]
 80003b2:	4913      	ldr	r1, [pc, #76]	; (8000400 <setInterruptForKeypad+0xdc>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	4313      	orrs	r3, r2
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	508b      	str	r3, [r1, r2]
	EXTI -> IMR1 |= (1U << 8);
 80003bc:	4a10      	ldr	r2, [pc, #64]	; (8000400 <setInterruptForKeypad+0xdc>)
 80003be:	2380      	movs	r3, #128	; 0x80
 80003c0:	58d3      	ldr	r3, [r2, r3]
 80003c2:	490f      	ldr	r1, [pc, #60]	; (8000400 <setInterruptForKeypad+0xdc>)
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	4313      	orrs	r3, r2
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	508b      	str	r3, [r1, r2]

	NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2005      	movs	r0, #5
 80003d2:	f7ff feb1 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 80003d6:	2005      	movs	r0, #5
 80003d8:	f7ff fe94 	bl	8000104 <__NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI2_3_IRQn, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	2006      	movs	r0, #6
 80003e0:	f7ff feaa 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 80003e4:	2006      	movs	r0, #6
 80003e6:	f7ff fe8d 	bl	8000104 <__NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80003ea:	2100      	movs	r1, #0
 80003ec:	2007      	movs	r0, #7
 80003ee:	f7ff fea3 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80003f2:	2007      	movs	r0, #7
 80003f4:	f7ff fe86 	bl	8000104 <__NVIC_EnableIRQ>
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	40021800 	.word	0x40021800

08000404 <clearAllKeypadRows>:

void clearAllKeypadRows() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	GPIOB -> ODR &= ~((uint16_t) (0x10));
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <clearAllKeypadRows+0x3c>)
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <clearAllKeypadRows+0x3c>)
 800040e:	2110      	movs	r1, #16
 8000410:	438a      	bics	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~((uint16_t) (0x20));
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <clearAllKeypadRows+0x3c>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <clearAllKeypadRows+0x3c>)
 800041a:	2120      	movs	r1, #32
 800041c:	438a      	bics	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~((uint16_t) (0x200));
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <clearAllKeypadRows+0x3c>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <clearAllKeypadRows+0x3c>)
 8000426:	4907      	ldr	r1, [pc, #28]	; (8000444 <clearAllKeypadRows+0x40>)
 8000428:	400a      	ands	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~((uint16_t) (0x100));
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <clearAllKeypadRows+0x3c>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <clearAllKeypadRows+0x3c>)
 8000432:	4905      	ldr	r1, [pc, #20]	; (8000448 <clearAllKeypadRows+0x44>)
 8000434:	400a      	ands	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	50000400 	.word	0x50000400
 8000444:	fffffdff 	.word	0xfffffdff
 8000448:	fffffeff 	.word	0xfffffeff

0800044c <setAllKeypadRows>:

void setAllKeypadRows() {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	GPIOB -> ODR |= ((uint16_t) (0x10));
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <setAllKeypadRows+0x40>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <setAllKeypadRows+0x40>)
 8000456:	2110      	movs	r1, #16
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint16_t) (0x20));
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <setAllKeypadRows+0x40>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <setAllKeypadRows+0x40>)
 8000462:	2120      	movs	r1, #32
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint16_t) (0x200));
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <setAllKeypadRows+0x40>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <setAllKeypadRows+0x40>)
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	0089      	lsls	r1, r1, #2
 8000472:	430a      	orrs	r2, r1
 8000474:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint16_t) (0x100));
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <setAllKeypadRows+0x40>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <setAllKeypadRows+0x40>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0049      	lsls	r1, r1, #1
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	50000400 	.word	0x50000400

08000490 <detectButton>:

keypadBut_t detectButton() {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	clearAllKeypadRows();
 8000496:	f7ff ffb5 	bl	8000404 <clearAllKeypadRows>
	keypadBut_t button = none;
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	2210      	movs	r2, #16
 800049e:	701a      	strb	r2, [r3, #0]

	// sadece R1 açık
	setKeypadRow(1);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f000 f8ab 	bl	80005fc <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 80004a6:	4b54      	ldr	r3, [pc, #336]	; (80005f8 <detectButton+0x168>)
 80004a8:	691a      	ldr	r2, [r3, #16]
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4013      	ands	r3, r2
 80004b0:	d003      	beq.n	80004ba <detectButton+0x2a>
		//1
		button = keypadBut1;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e01b      	b.n	80004f2 <detectButton+0x62>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 80004ba:	4b4f      	ldr	r3, [pc, #316]	; (80005f8 <detectButton+0x168>)
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	d003      	beq.n	80004cc <detectButton+0x3c>
		//2
		button = keypadBut2;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	2202      	movs	r2, #2
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	e012      	b.n	80004f2 <detectButton+0x62>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 80004cc:	4b4a      	ldr	r3, [pc, #296]	; (80005f8 <detectButton+0x168>)
 80004ce:	691b      	ldr	r3, [r3, #16]
 80004d0:	2201      	movs	r2, #1
 80004d2:	4013      	ands	r3, r2
 80004d4:	d003      	beq.n	80004de <detectButton+0x4e>
		//3
		button = keypadBut3;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	2203      	movs	r2, #3
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e009      	b.n	80004f2 <detectButton+0x62>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 80004de:	23a0      	movs	r3, #160	; 0xa0
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	691a      	ldr	r2, [r3, #16]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4013      	ands	r3, r2
 80004ea:	d002      	beq.n	80004f2 <detectButton+0x62>
		//A
		button = keypadButA;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	220a      	movs	r2, #10
 80004f0:	701a      	strb	r2, [r3, #0]
	}

	// sadece R2 açık
	setKeypadRow(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 f882 	bl	80005fc <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 80004f8:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <detectButton+0x168>)
 80004fa:	691a      	ldr	r2, [r3, #16]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4013      	ands	r3, r2
 8000502:	d003      	beq.n	800050c <detectButton+0x7c>
		//4
		button = keypadBut4;
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	2204      	movs	r2, #4
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e01b      	b.n	8000544 <detectButton+0xb4>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 800050c:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <detectButton+0x168>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	2204      	movs	r2, #4
 8000512:	4013      	ands	r3, r2
 8000514:	d003      	beq.n	800051e <detectButton+0x8e>
		//5
		button = keypadBut5;
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2205      	movs	r2, #5
 800051a:	701a      	strb	r2, [r3, #0]
 800051c:	e012      	b.n	8000544 <detectButton+0xb4>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 800051e:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <detectButton+0x168>)
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	d003      	beq.n	8000530 <detectButton+0xa0>
		//6
		button = keypadBut6;
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	2206      	movs	r2, #6
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	e009      	b.n	8000544 <detectButton+0xb4>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	691a      	ldr	r2, [r3, #16]
 8000536:	2380      	movs	r3, #128	; 0x80
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4013      	ands	r3, r2
 800053c:	d002      	beq.n	8000544 <detectButton+0xb4>
		//B
		button = keypadButB;
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	220b      	movs	r2, #11
 8000542:	701a      	strb	r2, [r3, #0]
	}

	// sadece R3 açık
	setKeypadRow(3);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f859 	bl	80005fc <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <detectButton+0x168>)
 800054c:	691a      	ldr	r2, [r3, #16]
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4013      	ands	r3, r2
 8000554:	d003      	beq.n	800055e <detectButton+0xce>
		//7
		button = keypadBut7;
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	2207      	movs	r2, #7
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e01b      	b.n	8000596 <detectButton+0x106>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <detectButton+0x168>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	2204      	movs	r2, #4
 8000564:	4013      	ands	r3, r2
 8000566:	d003      	beq.n	8000570 <detectButton+0xe0>
		//8
		button = keypadBut8;
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	2208      	movs	r2, #8
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e012      	b.n	8000596 <detectButton+0x106>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <detectButton+0x168>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	2201      	movs	r2, #1
 8000576:	4013      	ands	r3, r2
 8000578:	d003      	beq.n	8000582 <detectButton+0xf2>
		//9
		button = keypadBut9;
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	2209      	movs	r2, #9
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e009      	b.n	8000596 <detectButton+0x106>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 8000582:	23a0      	movs	r3, #160	; 0xa0
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	691a      	ldr	r2, [r3, #16]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4013      	ands	r3, r2
 800058e:	d002      	beq.n	8000596 <detectButton+0x106>
		//C
		button = keypadButC;
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	220c      	movs	r2, #12
 8000594:	701a      	strb	r2, [r3, #0]
	}

	// sadece R4 açık
	setKeypadRow(4);
 8000596:	2004      	movs	r0, #4
 8000598:	f000 f830 	bl	80005fc <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <detectButton+0x168>)
 800059e:	691a      	ldr	r2, [r3, #16]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	d003      	beq.n	80005b0 <detectButton+0x120>
		//*
		button = keypadButAst;
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	220f      	movs	r2, #15
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e01b      	b.n	80005e8 <detectButton+0x158>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <detectButton+0x168>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	2204      	movs	r2, #4
 80005b6:	4013      	ands	r3, r2
 80005b8:	d003      	beq.n	80005c2 <detectButton+0x132>
		//0
		button = keypadBut0;
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e012      	b.n	80005e8 <detectButton+0x158>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <detectButton+0x168>)
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	d003      	beq.n	80005d4 <detectButton+0x144>
		//#
		button = keypadButHash;
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	220e      	movs	r2, #14
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e009      	b.n	80005e8 <detectButton+0x158>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	691a      	ldr	r2, [r3, #16]
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4013      	ands	r3, r2
 80005e0:	d002      	beq.n	80005e8 <detectButton+0x158>
		//D
		button = keypadButD;
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	220d      	movs	r2, #13
 80005e6:	701a      	strb	r2, [r3, #0]
	}

	setAllKeypadRows();
 80005e8:	f7ff ff30 	bl	800044c <setAllKeypadRows>

	return button;
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b002      	add	sp, #8
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	50000400 	.word	0x50000400

080005fc <setKeypadRow>:

void setKeypadRow(uint8_t key) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	0002      	movs	r2, r0
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	701a      	strb	r2, [r3, #0]
	clearAllKeypadRows();
 8000608:	f7ff fefc 	bl	8000404 <clearAllKeypadRows>

	switch(key){
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b04      	cmp	r3, #4
 8000612:	d01e      	beq.n	8000652 <setKeypadRow+0x56>
 8000614:	dc25      	bgt.n	8000662 <setKeypadRow+0x66>
 8000616:	2b03      	cmp	r3, #3
 8000618:	d013      	beq.n	8000642 <setKeypadRow+0x46>
 800061a:	dc22      	bgt.n	8000662 <setKeypadRow+0x66>
 800061c:	2b01      	cmp	r3, #1
 800061e:	d002      	beq.n	8000626 <setKeypadRow+0x2a>
 8000620:	2b02      	cmp	r3, #2
 8000622:	d007      	beq.n	8000634 <setKeypadRow+0x38>
	case 4:
		GPIOB -> ODR |= ((uint16_t) (0x100));
		break;
	default:

		break;
 8000624:	e01d      	b.n	8000662 <setKeypadRow+0x66>
		GPIOB -> ODR |= ((uint16_t) (0x10));
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <setKeypadRow+0x70>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <setKeypadRow+0x70>)
 800062c:	2110      	movs	r1, #16
 800062e:	430a      	orrs	r2, r1
 8000630:	615a      	str	r2, [r3, #20]
		break;
 8000632:	e017      	b.n	8000664 <setKeypadRow+0x68>
		GPIOB -> ODR |= ((uint16_t) (0x20));
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <setKeypadRow+0x70>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <setKeypadRow+0x70>)
 800063a:	2120      	movs	r1, #32
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
		break;
 8000640:	e010      	b.n	8000664 <setKeypadRow+0x68>
		GPIOB -> ODR |= ((uint16_t) (0x200));
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <setKeypadRow+0x70>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <setKeypadRow+0x70>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0089      	lsls	r1, r1, #2
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
		break;
 8000650:	e008      	b.n	8000664 <setKeypadRow+0x68>
		GPIOB -> ODR |= ((uint16_t) (0x100));
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <setKeypadRow+0x70>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <setKeypadRow+0x70>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0049      	lsls	r1, r1, #1
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
		break;
 8000660:	e000      	b.n	8000664 <setKeypadRow+0x68>
		break;
 8000662:	46c0      	nop			; (mov r8, r8)
	}
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	50000400 	.word	0x50000400

08000670 <EXTI0_1_IRQHandler>:





void EXTI0_1_IRQHandler() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	button = detectButton();
 8000674:	f7ff ff0c 	bl	8000490 <detectButton>
 8000678:	0002      	movs	r2, r0
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <EXTI0_1_IRQHandler+0x20>)
 800067c:	601a      	str	r2, [r3, #0]

	EXTI -> RPR1 |= (1 << 0);
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <EXTI0_1_IRQHandler+0x24>)
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <EXTI0_1_IRQHandler+0x24>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	60da      	str	r2, [r3, #12]
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000020 	.word	0x20000020
 8000694:	40021800 	.word	0x40021800

08000698 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler() {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

		button = detectButton();
 800069c:	f7ff fef8 	bl	8000490 <detectButton>
 80006a0:	0002      	movs	r2, r0
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <EXTI2_3_IRQHandler+0x20>)
 80006a4:	601a      	str	r2, [r3, #0]
		EXTI -> RPR1 |= (1 << 2);
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI2_3_IRQHandler+0x24>)
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <EXTI2_3_IRQHandler+0x24>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	60da      	str	r2, [r3, #12]

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000020 	.word	0x20000020
 80006bc:	40021800 	.word	0x40021800

080006c0 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	//Burda önce A mı B mi ona bakacaz
	button = detectButton();
 80006c4:	f7ff fee4 	bl	8000490 <detectButton>
 80006c8:	0002      	movs	r2, r0
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <EXTI4_15_IRQHandler+0x30>)
 80006cc:	601a      	str	r2, [r3, #0]
	EXTI -> RPR1 |= (1 << 8);
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <EXTI4_15_IRQHandler+0x34>)
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <EXTI4_15_IRQHandler+0x34>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0049      	lsls	r1, r1, #1
 80006d8:	430a      	orrs	r2, r1
 80006da:	60da      	str	r2, [r3, #12]
	EXTI -> RPR1 |= (1 << 9);
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <EXTI4_15_IRQHandler+0x34>)
 80006de:	68da      	ldr	r2, [r3, #12]
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <EXTI4_15_IRQHandler+0x34>)
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	0089      	lsls	r1, r1, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	60da      	str	r2, [r3, #12]
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000020 	.word	0x20000020
 80006f4:	40021800 	.word	0x40021800

080006f8 <main>:



int main(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	setRCCForSSD();
 80006fe:	f000 fc49 	bl	8000f94 <setRCCForSSD>
	setMODERForSSD();
 8000702:	f000 fc55 	bl	8000fb0 <setMODERForSSD>

	setRCCForKeypad();
 8000706:	f7ff fd85 	bl	8000214 <setRCCForKeypad>
	setMODERForKeypad();
 800070a:	f7ff fd91 	bl	8000230 <setMODERForKeypad>
	setInterruptForKeypad();
 800070e:	f7ff fe09 	bl	8000324 <setInterruptForKeypad>

	setAllKeypadRows();
 8000712:	f7ff fe9b 	bl	800044c <setAllKeypadRows>
	resetAllSSDDigits();
 8000716:	f000 f8db 	bl	80008d0 <resetAllSSDDigits>
	int genlik,freq;
	if(button==10){
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <main+0x50>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b0a      	cmp	r3, #10
 8000720:	d104      	bne.n	800072c <main+0x34>
		genlik = number();
 8000722:	f000 f813 	bl	800074c <number>
 8000726:	0003      	movs	r3, r0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	e007      	b.n	800073c <main+0x44>

	}
	else if(button==11){
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <main+0x50>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b0b      	cmp	r3, #11
 8000732:	d103      	bne.n	800073c <main+0x44>
		freq = number();
 8000734:	f000 f80a 	bl	800074c <number>
 8000738:	0003      	movs	r3, r0
 800073a:	607b      	str	r3, [r7, #4]
	}

    return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	0018      	movs	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000020 	.word	0x20000020

0800074c <number>:

int number(){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	int i=0;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
	int j;
	button = -1;
 8000756:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <number+0x178>)
 8000758:	2201      	movs	r2, #1
 800075a:	4252      	negs	r2, r2
 800075c:	601a      	str	r2, [r3, #0]
	for( i = 1 ; i < 5 ; i++){
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e064      	b.n	800082e <number+0xe2>
		button = detectButton();
 8000764:	f7ff fe94 	bl	8000490 <detectButton>
 8000768:	0002      	movs	r2, r0
 800076a:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <number+0x178>)
 800076c:	601a      	str	r2, [r3, #0]
	if(button == 0 || button == 1 || button == 2 || button == 3 || button == 4 || button == 5 || button == 6 || button == 7 || button == 8 || button == 9 || button == 10 || button == 11|| button == 12 || button == 13 || button == 14 || button == 15){
 800076e:	4b55      	ldr	r3, [pc, #340]	; (80008c4 <number+0x178>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d03b      	beq.n	80007ee <number+0xa2>
 8000776:	4b53      	ldr	r3, [pc, #332]	; (80008c4 <number+0x178>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d037      	beq.n	80007ee <number+0xa2>
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <number+0x178>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d033      	beq.n	80007ee <number+0xa2>
 8000786:	4b4f      	ldr	r3, [pc, #316]	; (80008c4 <number+0x178>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d02f      	beq.n	80007ee <number+0xa2>
 800078e:	4b4d      	ldr	r3, [pc, #308]	; (80008c4 <number+0x178>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d02b      	beq.n	80007ee <number+0xa2>
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <number+0x178>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b05      	cmp	r3, #5
 800079c:	d027      	beq.n	80007ee <number+0xa2>
 800079e:	4b49      	ldr	r3, [pc, #292]	; (80008c4 <number+0x178>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d023      	beq.n	80007ee <number+0xa2>
 80007a6:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <number+0x178>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	d01f      	beq.n	80007ee <number+0xa2>
 80007ae:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <number+0x178>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d01b      	beq.n	80007ee <number+0xa2>
 80007b6:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <number+0x178>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b09      	cmp	r3, #9
 80007bc:	d017      	beq.n	80007ee <number+0xa2>
 80007be:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <number+0x178>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b0a      	cmp	r3, #10
 80007c4:	d013      	beq.n	80007ee <number+0xa2>
 80007c6:	4b3f      	ldr	r3, [pc, #252]	; (80008c4 <number+0x178>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b0b      	cmp	r3, #11
 80007cc:	d00f      	beq.n	80007ee <number+0xa2>
 80007ce:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <number+0x178>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b0c      	cmp	r3, #12
 80007d4:	d00b      	beq.n	80007ee <number+0xa2>
 80007d6:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <number+0x178>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b0d      	cmp	r3, #13
 80007dc:	d007      	beq.n	80007ee <number+0xa2>
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <number+0x178>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b0e      	cmp	r3, #14
 80007e4:	d003      	beq.n	80007ee <number+0xa2>
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <number+0x178>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	d11c      	bne.n	8000828 <number+0xdc>
			buttonx[i] = detectButton();
 80007ee:	f7ff fe4f 	bl	8000490 <detectButton>
 80007f2:	0001      	movs	r1, r0
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <number+0x17c>)
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	50d1      	str	r1, [r2, r3]
			delay(1000000);
 80007fc:	4b33      	ldr	r3, [pc, #204]	; (80008cc <number+0x180>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fbb8 	bl	8000f74 <delay>
			dispNumberDigitInSSD((uint8_t) button, (uint8_t) i );
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <number+0x178>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	001a      	movs	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	0019      	movs	r1, r3
 8000812:	0010      	movs	r0, r2
 8000814:	f000 f8be 	bl	8000994 <dispNumberDigitInSSD>
			delay(1000000);
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <number+0x180>)
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fbaa 	bl	8000f74 <delay>
			button = -1;
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <number+0x178>)
 8000822:	2201      	movs	r2, #1
 8000824:	4252      	negs	r2, r2
 8000826:	601a      	str	r2, [r3, #0]
	for( i = 1 ; i < 5 ; i++){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b04      	cmp	r3, #4
 8000832:	dd97      	ble.n	8000764 <number+0x18>
	}
	}
			if(i >= 4){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b03      	cmp	r3, #3
 8000838:	dd1a      	ble.n	8000870 <number+0x124>
				while(1){
		for(j = 1; j < 5; j++){
 800083a:	2301      	movs	r3, #1
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	e013      	b.n	8000868 <number+0x11c>
						dispNumberDigitInSSD((uint8_t) buttonx[j], (uint8_t) j );
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <number+0x17c>)
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	58d3      	ldr	r3, [r2, r3]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	001a      	movs	r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 f89e 	bl	8000994 <dispNumberDigitInSSD>
						delay(1000);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fb89 	bl	8000f74 <delay>
		for(j = 1; j < 5; j++){
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	2b04      	cmp	r3, #4
 800086c:	dde8      	ble.n	8000840 <number+0xf4>
 800086e:	e7e4      	b.n	800083a <number+0xee>
		}
		}
		}

	return ((buttonx[0] * 10^0) + (buttonx[1] * 10^1) + (buttonx[2] * 10^2) + (buttonx[3] * 10^3));
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <number+0x17c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	0013      	movs	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	189b      	adds	r3, r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	0019      	movs	r1, r3
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <number+0x17c>)
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	0013      	movs	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	189b      	adds	r3, r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	001a      	movs	r2, r3
 800088c:	2301      	movs	r3, #1
 800088e:	4053      	eors	r3, r2
 8000890:	18c9      	adds	r1, r1, r3
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <number+0x17c>)
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	0013      	movs	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	189b      	adds	r3, r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	001a      	movs	r2, r3
 80008a0:	2302      	movs	r3, #2
 80008a2:	4053      	eors	r3, r2
 80008a4:	18c9      	adds	r1, r1, r3
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <number+0x17c>)
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	0013      	movs	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	189b      	adds	r3, r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	001a      	movs	r2, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	4053      	eors	r3, r2
 80008b8:	18cb      	adds	r3, r1, r3
}
 80008ba:	0018      	movs	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000020 	.word	0x20000020
 80008c8:	20000024 	.word	0x20000024
 80008cc:	000f4240 	.word	0x000f4240

080008d0 <resetAllSSDDigits>:
#include "stm32g0xx.h"
#include <stdlib.h>
#include <math.h>


void resetAllSSDDigits() {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	GPIOA -> ODR |= ((uint32_t) (0x80));
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint32_t) (0x8));
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <resetAllSSDDigits+0x44>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <resetAllSSDDigits+0x44>)
 80008ea:	2108      	movs	r1, #8
 80008ec:	430a      	orrs	r2, r1
 80008ee:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= ((uint32_t) (0x400));
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	695a      	ldr	r2, [r3, #20]
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	00c9      	lsls	r1, r1, #3
 80008fe:	430a      	orrs	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint32_t) (0x2));
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <resetAllSSDDigits+0x44>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <resetAllSSDDigits+0x44>)
 8000908:	2102      	movs	r1, #2
 800090a:	430a      	orrs	r2, r1
 800090c:	615a      	str	r2, [r3, #20]
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	50000400 	.word	0x50000400

08000918 <setSSDDigit>:

void setSSDDigit(uint8_t digit) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	701a      	strb	r2, [r3, #0]
	* 		   D3	=>	PA10
	* 		   D4	=>	PB1
    */

	// önce hepsini kapat
	resetAllSSDDigits();
 8000924:	f7ff ffd4 	bl	80008d0 <resetAllSSDDigits>
	// **** //

	switch(digit) {
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d021      	beq.n	8000974 <setSSDDigit+0x5c>
 8000930:	dc27      	bgt.n	8000982 <setSSDDigit+0x6a>
 8000932:	2b03      	cmp	r3, #3
 8000934:	d015      	beq.n	8000962 <setSSDDigit+0x4a>
 8000936:	dc24      	bgt.n	8000982 <setSSDDigit+0x6a>
 8000938:	2b01      	cmp	r3, #1
 800093a:	d002      	beq.n	8000942 <setSSDDigit+0x2a>
 800093c:	2b02      	cmp	r3, #2
 800093e:	d009      	beq.n	8000954 <setSSDDigit+0x3c>
		break;
	case 4:
		GPIOB -> ODR &= ~((uint32_t) (0x2)); //0010
		break;
	default:
		break;
 8000940:	e01f      	b.n	8000982 <setSSDDigit+0x6a>
		GPIOA -> ODR &= ~((uint32_t) (0x80)); //1000 0000
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	438a      	bics	r2, r1
 8000950:	615a      	str	r2, [r3, #20]
		break;
 8000952:	e017      	b.n	8000984 <setSSDDigit+0x6c>
		GPIOB -> ODR &= ~((uint32_t) (0x8)); // 1000
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <setSSDDigit+0x74>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <setSSDDigit+0x74>)
 800095a:	2108      	movs	r1, #8
 800095c:	438a      	bics	r2, r1
 800095e:	615a      	str	r2, [r3, #20]
		break;
 8000960:	e010      	b.n	8000984 <setSSDDigit+0x6c>
		GPIOA -> ODR &= ~((uint32_t) (0x400)); // 0100 0000 0000
 8000962:	23a0      	movs	r3, #160	; 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <setSSDDigit+0x78>)
 800096e:	400a      	ands	r2, r1
 8000970:	615a      	str	r2, [r3, #20]
		break;
 8000972:	e007      	b.n	8000984 <setSSDDigit+0x6c>
		GPIOB -> ODR &= ~((uint32_t) (0x2)); //0010
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <setSSDDigit+0x74>)
 8000976:	695a      	ldr	r2, [r3, #20]
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <setSSDDigit+0x74>)
 800097a:	2102      	movs	r1, #2
 800097c:	438a      	bics	r2, r1
 800097e:	615a      	str	r2, [r3, #20]
		break;
 8000980:	e000      	b.n	8000984 <setSSDDigit+0x6c>
		break;
 8000982:	46c0      	nop			; (mov r8, r8)
	}
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}
 800098c:	50000400 	.word	0x50000400
 8000990:	fffffbff 	.word	0xfffffbff

08000994 <dispNumberDigitInSSD>:

void dispNumberDigitInSSD(uint8_t zeroToFifteen, uint8_t SSDDigit) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	1c0a      	adds	r2, r1, #0
 80009a4:	701a      	strb	r2, [r3, #0]
	setSSDDigit(SSDDigit);
 80009a6:	1dbb      	adds	r3, r7, #6
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff ffb4 	bl	8000918 <setSSDDigit>

	//CLEAR
		GPIOA->ODR &= ~(1U << 0); //PA0    A
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2101      	movs	r1, #1
 80009bc:	438a      	bics	r2, r1
 80009be:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 1); //PA1    B
 80009c0:	23a0      	movs	r3, #160	; 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2102      	movs	r1, #2
 80009cc:	438a      	bics	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 4); //PA4    F
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	2110      	movs	r1, #16
 80009dc:	438a      	bics	r2, r1
 80009de:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 5); //PA5    G
 80009e0:	23a0      	movs	r3, #160	; 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	695a      	ldr	r2, [r3, #20]
 80009e6:	23a0      	movs	r3, #160	; 0xa0
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	2120      	movs	r1, #32
 80009ec:	438a      	bics	r2, r1
 80009ee:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 12); //PA12  C
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	49e1      	ldr	r1, [pc, #900]	; (8000d80 <dispNumberDigitInSSD+0x3ec>)
 80009fc:	400a      	ands	r2, r1
 80009fe:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11); //PA11  E
 8000a00:	23a0      	movs	r3, #160	; 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	23a0      	movs	r3, #160	; 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	49de      	ldr	r1, [pc, #888]	; (8000d84 <dispNumberDigitInSSD+0x3f0>)
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 6); //PA6    D
 8000a10:	23a0      	movs	r3, #160	; 0xa0
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	438a      	bics	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 6); //PB6    .
 8000a20:	4bd9      	ldr	r3, [pc, #868]	; (8000d88 <dispNumberDigitInSSD+0x3f4>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	4bd8      	ldr	r3, [pc, #864]	; (8000d88 <dispNumberDigitInSSD+0x3f4>)
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	438a      	bics	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]

		switch(zeroToFifteen){
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d900      	bls.n	8000a36 <dispNumberDigitInSSD+0xa2>
 8000a34:	e299      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
 8000a36:	009a      	lsls	r2, r3, #2
 8000a38:	4bd4      	ldr	r3, [pc, #848]	; (8000d8c <dispNumberDigitInSSD+0x3f8>)
 8000a3a:	18d3      	adds	r3, r2, r3
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	469f      	mov	pc, r3
			case 0:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000a40:	23a0      	movs	r3, #160	; 0xa0
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0149      	lsls	r1, r1, #5
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	695a      	ldr	r2, [r3, #20]
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	23a0      	movs	r3, #160	; 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0109      	lsls	r1, r1, #4
 8000a90:	430a      	orrs	r2, r1
 8000a92:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000a94:	23a0      	movs	r3, #160	; 0xa0
 8000a96:	05db      	lsls	r3, r3, #23
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	23a0      	movs	r3, #160	; 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	615a      	str	r2, [r3, #20]
				break;
 8000aa4:	e261      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 1:
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000aa6:	23a0      	movs	r3, #160	; 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0149      	lsls	r1, r1, #5
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	615a      	str	r2, [r3, #20]
				break;
 8000ac8:	e24f      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 2:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	23a0      	movs	r3, #160	; 0xa0
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	23a0      	movs	r3, #160	; 0xa0
 8000af2:	05db      	lsls	r3, r3, #23
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	0109      	lsls	r1, r1, #4
 8000af8:	430a      	orrs	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2120      	movs	r1, #32
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
				break;
 8000b1c:	e225      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 3:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	23a0      	movs	r3, #160	; 0xa0
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2102      	movs	r1, #2
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	23a0      	movs	r3, #160	; 0xa0
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	0149      	lsls	r1, r1, #5
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	23a0      	movs	r3, #160	; 0xa0
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
				break;
 8000b70:	e1fb      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 4:
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0109      	lsls	r1, r1, #4
 8000b90:	430a      	orrs	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000b94:	23a0      	movs	r3, #160	; 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	23a0      	movs	r3, #160	; 0xa0
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	23a0      	movs	r3, #160	; 0xa0
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	2120      	movs	r1, #32
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	615a      	str	r2, [r3, #20]
				break;
 8000bb4:	e1d9      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 5:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	23a0      	movs	r3, #160	; 0xa0
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0149      	lsls	r1, r1, #5
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000bd8:	23a0      	movs	r3, #160	; 0xa0
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	430a      	orrs	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000bf8:	23a0      	movs	r3, #160	; 0xa0
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	2120      	movs	r1, #32
 8000c04:	430a      	orrs	r2, r1
 8000c06:	615a      	str	r2, [r3, #20]
				break;
 8000c08:	e1af      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 6:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000c0a:	23a0      	movs	r3, #160	; 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 12); //PA12  C
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	0149      	lsls	r1, r1, #5
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 6); //PA6    D
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 11); //PA11  E
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	23a0      	movs	r3, #160	; 0xa0
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	0109      	lsls	r1, r1, #4
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 4); //PA4    F
 8000c4e:	23a0      	movs	r3, #160	; 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	23a0      	movs	r3, #160	; 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	2110      	movs	r1, #16
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 5); //PA5    G
 8000c5e:	23a0      	movs	r3, #160	; 0xa0
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	2120      	movs	r1, #32
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	615a      	str	r2, [r3, #20]
				break;
 8000c6e:	e17c      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 7:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	695a      	ldr	r2, [r3, #20]
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	23a0      	movs	r3, #160	; 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0149      	lsls	r1, r1, #5
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	615a      	str	r2, [r3, #20]
				break;
 8000ca2:	e162      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 8:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	2101      	movs	r1, #1
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	2110      	movs	r1, #16
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000cd4:	23a0      	movs	r3, #160	; 0xa0
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	2120      	movs	r1, #32
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000ce4:	23a0      	movs	r3, #160	; 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	695a      	ldr	r2, [r3, #20]
 8000cea:	23a0      	movs	r3, #160	; 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0149      	lsls	r1, r1, #5
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	695a      	ldr	r2, [r3, #20]
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0109      	lsls	r1, r1, #4
 8000d04:	430a      	orrs	r2, r1
 8000d06:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000d08:	23a0      	movs	r3, #160	; 0xa0
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	695a      	ldr	r2, [r3, #20]
 8000d0e:	23a0      	movs	r3, #160	; 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	430a      	orrs	r2, r1
 8000d16:	615a      	str	r2, [r3, #20]
				break;
 8000d18:	e127      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 9:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000d1a:	23a0      	movs	r3, #160	; 0xa0
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	695a      	ldr	r2, [r3, #20]
 8000d20:	23a0      	movs	r3, #160	; 0xa0
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	23a0      	movs	r3, #160	; 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2102      	movs	r1, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000d3a:	23a0      	movs	r3, #160	; 0xa0
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2110      	movs	r1, #16
 8000d46:	430a      	orrs	r2, r1
 8000d48:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000d4a:	23a0      	movs	r3, #160	; 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	2120      	movs	r1, #32
 8000d56:	430a      	orrs	r2, r1
 8000d58:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	23a0      	movs	r3, #160	; 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0149      	lsls	r1, r1, #5
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
				break;
 8000d7c:	e0f5      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	ffffefff 	.word	0xffffefff
 8000d84:	fffff7ff 	.word	0xfffff7ff
 8000d88:	50000400 	.word	0x50000400
 8000d8c:	08001110 	.word	0x08001110
			case 10: //A
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000d90:	23a0      	movs	r3, #160	; 0xa0
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	23a0      	movs	r3, #160	; 0xa0
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	2102      	movs	r1, #2
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000db0:	23a0      	movs	r3, #160	; 0xa0
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	23a0      	movs	r3, #160	; 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	2110      	movs	r1, #16
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	23a0      	movs	r3, #160	; 0xa0
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	2120      	movs	r1, #32
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000dd0:	23a0      	movs	r3, #160	; 0xa0
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	695a      	ldr	r2, [r3, #20]
 8000dd6:	23a0      	movs	r3, #160	; 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0149      	lsls	r1, r1, #5
 8000dde:	430a      	orrs	r2, r1
 8000de0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000de2:	23a0      	movs	r3, #160	; 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	695a      	ldr	r2, [r3, #20]
 8000de8:	23a0      	movs	r3, #160	; 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0109      	lsls	r1, r1, #4
 8000df0:	430a      	orrs	r2, r1
 8000df2:	615a      	str	r2, [r3, #20]
				break;
 8000df4:	e0b9      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 11: //B
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	2102      	movs	r1, #2
 8000e12:	430a      	orrs	r2, r1
 8000e14:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	23a0      	movs	r3, #160	; 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	2110      	movs	r1, #16
 8000e22:	430a      	orrs	r2, r1
 8000e24:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	23a0      	movs	r3, #160	; 0xa0
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	2120      	movs	r1, #32
 8000e32:	430a      	orrs	r2, r1
 8000e34:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000e36:	23a0      	movs	r3, #160	; 0xa0
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	23a0      	movs	r3, #160	; 0xa0
 8000e3e:	05db      	lsls	r3, r3, #23
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0149      	lsls	r1, r1, #5
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000e48:	23a0      	movs	r3, #160	; 0xa0
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	23a0      	movs	r3, #160	; 0xa0
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	0109      	lsls	r1, r1, #4
 8000e56:	430a      	orrs	r2, r1
 8000e58:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	23a0      	movs	r3, #160	; 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	430a      	orrs	r2, r1
 8000e68:	615a      	str	r2, [r3, #20]
				break;
 8000e6a:	e07e      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>
			case 12: //C
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000e8c:	23a0      	movs	r3, #160	; 0xa0
 8000e8e:	05db      	lsls	r3, r3, #23
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0109      	lsls	r1, r1, #4
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	23a0      	movs	r3, #160	; 0xa0
 8000ea6:	05db      	lsls	r3, r3, #23
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	615a      	str	r2, [r3, #20]
				break;
 8000eae:	e05c      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>

			case 13: //D
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000eb0:	23a0      	movs	r3, #160	; 0xa0
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	05db      	lsls	r3, r3, #23
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	23a0      	movs	r3, #160	; 0xa0
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	2102      	movs	r1, #2
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000ed0:	23a0      	movs	r3, #160	; 0xa0
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	0149      	lsls	r1, r1, #5
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000ee2:	23a0      	movs	r3, #160	; 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	23a0      	movs	r3, #160	; 0xa0
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000ef2:	23a0      	movs	r3, #160	; 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	695a      	ldr	r2, [r3, #20]
 8000ef8:	23a0      	movs	r3, #160	; 0xa0
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0109      	lsls	r1, r1, #4
 8000f00:	430a      	orrs	r2, r1
 8000f02:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	2110      	movs	r1, #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	615a      	str	r2, [r3, #20]
				break;
 8000f14:	e029      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>

			case 14: //#
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	695a      	ldr	r2, [r3, #20]
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000f26:	23a0      	movs	r3, #160	; 0xa0
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	2102      	movs	r1, #2
 8000f32:	430a      	orrs	r2, r1
 8000f34:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000f36:	23a0      	movs	r3, #160	; 0xa0
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	695a      	ldr	r2, [r3, #20]
 8000f3c:	23a0      	movs	r3, #160	; 0xa0
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	2120      	movs	r1, #32
 8000f42:	430a      	orrs	r2, r1
 8000f44:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000f46:	23a0      	movs	r3, #160	; 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	23a0      	movs	r3, #160	; 0xa0
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	2110      	movs	r1, #16
 8000f52:	430a      	orrs	r2, r1
 8000f54:	615a      	str	r2, [r3, #20]
				break;
 8000f56:	e008      	b.n	8000f6a <dispNumberDigitInSSD+0x5d6>

			case 15: //*
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000f58:	23a0      	movs	r3, #160	; 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	430a      	orrs	r2, r1
 8000f66:	615a      	str	r2, [r3, #20]

				break;
 8000f68:	46c0      	nop			; (mov r8, r8)

			}
		}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)

08000f74 <delay>:


void delay(volatile uint32_t s) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000f7c:	e002      	b.n	8000f84 <delay+0x10>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f9      	bne.n	8000f7e <delay+0xa>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <setRCCForSSD>:

// PINLERE GORE AYARLAMAN LAZIM
void setRCCForSSD() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	// A ve B pinlerini aç
	RCC -> IOPENR |= (3U);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <setRCCForSSD+0x18>)
 8000f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <setRCCForSSD+0x18>)
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	40021000 	.word	0x40021000

08000fb0 <setMODERForSSD>:

// PINLERE GORE AYARLAMAN LAZIM
void setMODERForSSD() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	// A için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx 01 01 01 xx xx 01 01 01 01 xx xx 01 01  lazım
	// 00 00 00	01 01 01 00 00 01 01 01 01 00 00 01 01 = 0x1505505  orlamak için
	// 11 11 11	01 01 01 11 11 01 01 01 01 11 11 01 01 = 0xFD5F55F5 andlemek için
	GPIOA -> MODER |= (uint32_t) (0x1505505);
 8000fb4:	23a0      	movs	r3, #160	; 0xa0
 8000fb6:	05db      	lsls	r3, r3, #23
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <setMODERForSSD+0x44>)
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER &= (uint32_t) (0xFD5F55F5);
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	23a0      	movs	r3, #160	; 0xa0
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <setMODERForSSD+0x48>)
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
	// B için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx xx xx xx xx xx xx xx xx xx 01 xx 01 xx
	// 	  								   01 00 01 00 = 0x44 orlamak için
	// 11 11 11 11 11 11 11 11 11 11 11 11 01 11 01 11 = 0xFFFFFF77 andlemek için
	GPIOB -> MODER |= (uint32_t) (0x44);
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <setMODERForSSD+0x4c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <setMODERForSSD+0x4c>)
 8000fda:	2144      	movs	r1, #68	; 0x44
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= (uint32_t) (0xFFFFFF77);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <setMODERForSSD+0x4c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <setMODERForSSD+0x4c>)
 8000fe6:	2188      	movs	r1, #136	; 0x88
 8000fe8:	438a      	bics	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	01505505 	.word	0x01505505
 8000ff8:	fd5f55f5 	.word	0xfd5f55f5
 8000ffc:	50000400 	.word	0x50000400

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f832 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f7ff fff7 	bl	800102e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001066:	f000 f823 	bl	80010b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800106a:	f7ff fb45 	bl	80006f8 <main>

0800106e <LoopForever>:

LoopForever:
  b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   r0, =_estack
 8001070:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800107c:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 8001080:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001084:	20000038 	.word	0x20000038

08001088 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_IRQHandler>
	...

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	18d2      	adds	r2, r2, r3
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_IncTick+0x20>)
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000034 	.word	0x20000034

080010b0 <__libc_init_array>:
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	2600      	movs	r6, #0
 80010b4:	4d0c      	ldr	r5, [pc, #48]	; (80010e8 <__libc_init_array+0x38>)
 80010b6:	4c0d      	ldr	r4, [pc, #52]	; (80010ec <__libc_init_array+0x3c>)
 80010b8:	1b64      	subs	r4, r4, r5
 80010ba:	10a4      	asrs	r4, r4, #2
 80010bc:	42a6      	cmp	r6, r4
 80010be:	d109      	bne.n	80010d4 <__libc_init_array+0x24>
 80010c0:	2600      	movs	r6, #0
 80010c2:	f000 f819 	bl	80010f8 <_init>
 80010c6:	4d0a      	ldr	r5, [pc, #40]	; (80010f0 <__libc_init_array+0x40>)
 80010c8:	4c0a      	ldr	r4, [pc, #40]	; (80010f4 <__libc_init_array+0x44>)
 80010ca:	1b64      	subs	r4, r4, r5
 80010cc:	10a4      	asrs	r4, r4, #2
 80010ce:	42a6      	cmp	r6, r4
 80010d0:	d105      	bne.n	80010de <__libc_init_array+0x2e>
 80010d2:	bd70      	pop	{r4, r5, r6, pc}
 80010d4:	00b3      	lsls	r3, r6, #2
 80010d6:	58eb      	ldr	r3, [r5, r3]
 80010d8:	4798      	blx	r3
 80010da:	3601      	adds	r6, #1
 80010dc:	e7ee      	b.n	80010bc <__libc_init_array+0xc>
 80010de:	00b3      	lsls	r3, r6, #2
 80010e0:	58eb      	ldr	r3, [r5, r3]
 80010e2:	4798      	blx	r3
 80010e4:	3601      	adds	r6, #1
 80010e6:	e7f2      	b.n	80010ce <__libc_init_array+0x1e>
 80010e8:	08001150 	.word	0x08001150
 80010ec:	08001150 	.word	0x08001150
 80010f0:	08001150 	.word	0x08001150
 80010f4:	08001154 	.word	0x08001154

080010f8 <_init>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr

08001104 <_fini>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr
