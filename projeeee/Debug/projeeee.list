
projeeee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001664  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001720  08001720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001760  08001760  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001760  08001760  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001760  08001760  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001768  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  0800176c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800176c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b21  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bd5  00000000  00000000  00023b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00024728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000288  00000000  00000000  000249f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013eb9  00000000  00000000  00024c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000311d  00000000  00000000  00038b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080979  00000000  00000000  0003bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc5c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000089c  00000000  00000000  000bc61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001708 	.word	0x08001708

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001708 	.word	0x08001708

08000104 <__divsi3>:
 8000104:	4603      	mov	r3, r0
 8000106:	430b      	orrs	r3, r1
 8000108:	d47f      	bmi.n	800020a <__divsi3+0x106>
 800010a:	2200      	movs	r2, #0
 800010c:	0843      	lsrs	r3, r0, #1
 800010e:	428b      	cmp	r3, r1
 8000110:	d374      	bcc.n	80001fc <__divsi3+0xf8>
 8000112:	0903      	lsrs	r3, r0, #4
 8000114:	428b      	cmp	r3, r1
 8000116:	d35f      	bcc.n	80001d8 <__divsi3+0xd4>
 8000118:	0a03      	lsrs	r3, r0, #8
 800011a:	428b      	cmp	r3, r1
 800011c:	d344      	bcc.n	80001a8 <__divsi3+0xa4>
 800011e:	0b03      	lsrs	r3, r0, #12
 8000120:	428b      	cmp	r3, r1
 8000122:	d328      	bcc.n	8000176 <__divsi3+0x72>
 8000124:	0c03      	lsrs	r3, r0, #16
 8000126:	428b      	cmp	r3, r1
 8000128:	d30d      	bcc.n	8000146 <__divsi3+0x42>
 800012a:	22ff      	movs	r2, #255	; 0xff
 800012c:	0209      	lsls	r1, r1, #8
 800012e:	ba12      	rev	r2, r2
 8000130:	0c03      	lsrs	r3, r0, #16
 8000132:	428b      	cmp	r3, r1
 8000134:	d302      	bcc.n	800013c <__divsi3+0x38>
 8000136:	1212      	asrs	r2, r2, #8
 8000138:	0209      	lsls	r1, r1, #8
 800013a:	d065      	beq.n	8000208 <__divsi3+0x104>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d319      	bcc.n	8000176 <__divsi3+0x72>
 8000142:	e000      	b.n	8000146 <__divsi3+0x42>
 8000144:	0a09      	lsrs	r1, r1, #8
 8000146:	0bc3      	lsrs	r3, r0, #15
 8000148:	428b      	cmp	r3, r1
 800014a:	d301      	bcc.n	8000150 <__divsi3+0x4c>
 800014c:	03cb      	lsls	r3, r1, #15
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	4152      	adcs	r2, r2
 8000152:	0b83      	lsrs	r3, r0, #14
 8000154:	428b      	cmp	r3, r1
 8000156:	d301      	bcc.n	800015c <__divsi3+0x58>
 8000158:	038b      	lsls	r3, r1, #14
 800015a:	1ac0      	subs	r0, r0, r3
 800015c:	4152      	adcs	r2, r2
 800015e:	0b43      	lsrs	r3, r0, #13
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__divsi3+0x64>
 8000164:	034b      	lsls	r3, r1, #13
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__divsi3+0x70>
 8000170:	030b      	lsls	r3, r1, #12
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0ac3      	lsrs	r3, r0, #11
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__divsi3+0x7c>
 800017c:	02cb      	lsls	r3, r1, #11
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0a83      	lsrs	r3, r0, #10
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__divsi3+0x88>
 8000188:	028b      	lsls	r3, r1, #10
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0a43      	lsrs	r3, r0, #9
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__divsi3+0x94>
 8000194:	024b      	lsls	r3, r1, #9
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0a03      	lsrs	r3, r0, #8
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__divsi3+0xa0>
 80001a0:	020b      	lsls	r3, r1, #8
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	d2cd      	bcs.n	8000144 <__divsi3+0x40>
 80001a8:	09c3      	lsrs	r3, r0, #7
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__divsi3+0xae>
 80001ae:	01cb      	lsls	r3, r1, #7
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0983      	lsrs	r3, r0, #6
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__divsi3+0xba>
 80001ba:	018b      	lsls	r3, r1, #6
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0943      	lsrs	r3, r0, #5
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__divsi3+0xc6>
 80001c6:	014b      	lsls	r3, r1, #5
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0903      	lsrs	r3, r0, #4
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__divsi3+0xd2>
 80001d2:	010b      	lsls	r3, r1, #4
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	08c3      	lsrs	r3, r0, #3
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__divsi3+0xde>
 80001de:	00cb      	lsls	r3, r1, #3
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0883      	lsrs	r3, r0, #2
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__divsi3+0xea>
 80001ea:	008b      	lsls	r3, r1, #2
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__divsi3+0xf6>
 80001f6:	004b      	lsls	r3, r1, #1
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	1a41      	subs	r1, r0, r1
 80001fe:	d200      	bcs.n	8000202 <__divsi3+0xfe>
 8000200:	4601      	mov	r1, r0
 8000202:	4152      	adcs	r2, r2
 8000204:	4610      	mov	r0, r2
 8000206:	4770      	bx	lr
 8000208:	e05d      	b.n	80002c6 <__divsi3+0x1c2>
 800020a:	0fca      	lsrs	r2, r1, #31
 800020c:	d000      	beq.n	8000210 <__divsi3+0x10c>
 800020e:	4249      	negs	r1, r1
 8000210:	1003      	asrs	r3, r0, #32
 8000212:	d300      	bcc.n	8000216 <__divsi3+0x112>
 8000214:	4240      	negs	r0, r0
 8000216:	4053      	eors	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	469c      	mov	ip, r3
 800021c:	0903      	lsrs	r3, r0, #4
 800021e:	428b      	cmp	r3, r1
 8000220:	d32d      	bcc.n	800027e <__divsi3+0x17a>
 8000222:	0a03      	lsrs	r3, r0, #8
 8000224:	428b      	cmp	r3, r1
 8000226:	d312      	bcc.n	800024e <__divsi3+0x14a>
 8000228:	22fc      	movs	r2, #252	; 0xfc
 800022a:	0189      	lsls	r1, r1, #6
 800022c:	ba12      	rev	r2, r2
 800022e:	0a03      	lsrs	r3, r0, #8
 8000230:	428b      	cmp	r3, r1
 8000232:	d30c      	bcc.n	800024e <__divsi3+0x14a>
 8000234:	0189      	lsls	r1, r1, #6
 8000236:	1192      	asrs	r2, r2, #6
 8000238:	428b      	cmp	r3, r1
 800023a:	d308      	bcc.n	800024e <__divsi3+0x14a>
 800023c:	0189      	lsls	r1, r1, #6
 800023e:	1192      	asrs	r2, r2, #6
 8000240:	428b      	cmp	r3, r1
 8000242:	d304      	bcc.n	800024e <__divsi3+0x14a>
 8000244:	0189      	lsls	r1, r1, #6
 8000246:	d03a      	beq.n	80002be <__divsi3+0x1ba>
 8000248:	1192      	asrs	r2, r2, #6
 800024a:	e000      	b.n	800024e <__divsi3+0x14a>
 800024c:	0989      	lsrs	r1, r1, #6
 800024e:	09c3      	lsrs	r3, r0, #7
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x154>
 8000254:	01cb      	lsls	r3, r1, #7
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0983      	lsrs	r3, r0, #6
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x160>
 8000260:	018b      	lsls	r3, r1, #6
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0943      	lsrs	r3, r0, #5
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x16c>
 800026c:	014b      	lsls	r3, r1, #5
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x178>
 8000278:	010b      	lsls	r3, r1, #4
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	08c3      	lsrs	r3, r0, #3
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x184>
 8000284:	00cb      	lsls	r3, r1, #3
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0883      	lsrs	r3, r0, #2
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x190>
 8000290:	008b      	lsls	r3, r1, #2
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	d2d9      	bcs.n	800024c <__divsi3+0x148>
 8000298:	0843      	lsrs	r3, r0, #1
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0x19e>
 800029e:	004b      	lsls	r3, r1, #1
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	1a41      	subs	r1, r0, r1
 80002a6:	d200      	bcs.n	80002aa <__divsi3+0x1a6>
 80002a8:	4601      	mov	r1, r0
 80002aa:	4663      	mov	r3, ip
 80002ac:	4152      	adcs	r2, r2
 80002ae:	105b      	asrs	r3, r3, #1
 80002b0:	4610      	mov	r0, r2
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x1b4>
 80002b4:	4240      	negs	r0, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d500      	bpl.n	80002bc <__divsi3+0x1b8>
 80002ba:	4249      	negs	r1, r1
 80002bc:	4770      	bx	lr
 80002be:	4663      	mov	r3, ip
 80002c0:	105b      	asrs	r3, r3, #1
 80002c2:	d300      	bcc.n	80002c6 <__divsi3+0x1c2>
 80002c4:	4240      	negs	r0, r0
 80002c6:	b501      	push	{r0, lr}
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 f805 	bl	80002d8 <__aeabi_idiv0>
 80002ce:	bd02      	pop	{r1, pc}

080002d0 <__aeabi_idivmod>:
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d0f8      	beq.n	80002c6 <__divsi3+0x1c2>
 80002d4:	e716      	b.n	8000104 <__divsi3>
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_idiv0>:
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b7f      	cmp	r3, #127	; 0x7f
 80002ee:	d809      	bhi.n	8000304 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	001a      	movs	r2, r3
 80002f6:	231f      	movs	r3, #31
 80002f8:	401a      	ands	r2, r3
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_EnableIRQ+0x30>)
 80002fc:	2101      	movs	r1, #1
 80002fe:	4091      	lsls	r1, r2
 8000300:	000a      	movs	r2, r1
 8000302:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b002      	add	sp, #8
 800030a:	bd80      	pop	{r7, pc}
 800030c:	e000e100 	.word	0xe000e100

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b7f      	cmp	r3, #127	; 0x7f
 8000324:	d828      	bhi.n	8000378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4a2f      	ldr	r2, [pc, #188]	; (80003e4 <__NVIC_SetPriority+0xd4>)
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b25b      	sxtb	r3, r3
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	33c0      	adds	r3, #192	; 0xc0
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	589b      	ldr	r3, [r3, r2]
 8000336:	1dfa      	adds	r2, r7, #7
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	0011      	movs	r1, r2
 800033c:	2203      	movs	r2, #3
 800033e:	400a      	ands	r2, r1
 8000340:	00d2      	lsls	r2, r2, #3
 8000342:	21ff      	movs	r1, #255	; 0xff
 8000344:	4091      	lsls	r1, r2
 8000346:	000a      	movs	r2, r1
 8000348:	43d2      	mvns	r2, r2
 800034a:	401a      	ands	r2, r3
 800034c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	019b      	lsls	r3, r3, #6
 8000352:	22ff      	movs	r2, #255	; 0xff
 8000354:	401a      	ands	r2, r3
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	0018      	movs	r0, r3
 800035c:	2303      	movs	r3, #3
 800035e:	4003      	ands	r3, r0
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	481f      	ldr	r0, [pc, #124]	; (80003e4 <__NVIC_SetPriority+0xd4>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	430a      	orrs	r2, r1
 8000370:	33c0      	adds	r3, #192	; 0xc0
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000376:	e031      	b.n	80003dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <__NVIC_SetPriority+0xd8>)
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	0019      	movs	r1, r3
 8000380:	230f      	movs	r3, #15
 8000382:	400b      	ands	r3, r1
 8000384:	3b08      	subs	r3, #8
 8000386:	089b      	lsrs	r3, r3, #2
 8000388:	3306      	adds	r3, #6
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	18d3      	adds	r3, r2, r3
 800038e:	3304      	adds	r3, #4
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1dfa      	adds	r2, r7, #7
 8000394:	7812      	ldrb	r2, [r2, #0]
 8000396:	0011      	movs	r1, r2
 8000398:	2203      	movs	r2, #3
 800039a:	400a      	ands	r2, r1
 800039c:	00d2      	lsls	r2, r2, #3
 800039e:	21ff      	movs	r1, #255	; 0xff
 80003a0:	4091      	lsls	r1, r2
 80003a2:	000a      	movs	r2, r1
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	401a      	ands	r2, r3
 80003a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	019b      	lsls	r3, r3, #6
 80003ae:	22ff      	movs	r2, #255	; 0xff
 80003b0:	401a      	ands	r2, r3
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	0018      	movs	r0, r3
 80003b8:	2303      	movs	r3, #3
 80003ba:	4003      	ands	r3, r0
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <__NVIC_SetPriority+0xd8>)
 80003c2:	1dfb      	adds	r3, r7, #7
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	001c      	movs	r4, r3
 80003c8:	230f      	movs	r3, #15
 80003ca:	4023      	ands	r3, r4
 80003cc:	3b08      	subs	r3, #8
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	430a      	orrs	r2, r1
 80003d2:	3306      	adds	r3, #6
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	18c3      	adds	r3, r0, r3
 80003d8:	3304      	adds	r3, #4
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b003      	add	sp, #12
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <BSP_systemInit>:
		0x1aaa,0x1b6c,0x1c2f,0x1cf3,0x1db7,0x1e7b,0x1f40};
static int freq={50};

#define LEDDELAY    160000;

void BSP_systemInit(void){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	setRCCForSSD();
 80003f0:	f000 fb72 	bl	8000ad8 <setRCCForSSD>
	setMODERForSSD();
 80003f4:	f000 fb7e 	bl	8000af4 <setMODERForSSD>
	setRCCForKeypad();
 80003f8:	f000 fba8 	bl	8000b4c <setRCCForKeypad>
	setMODERForKeypad();
 80003fc:	f000 fbb4 	bl	8000b68 <setMODERForKeypad>
	setInterruptForKeypad();
 8000400:	f000 fc2c 	bl	8000c5c <setInterruptForKeypad>
	setAllKeypadRows();
 8000404:	f000 fcbe 	bl	8000d84 <setAllKeypadRows>
	resetAllSSDDigits();
 8000408:	f000 f804 	bl	8000414 <resetAllSSDDigits>
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <resetAllSSDDigits>:


//SEVEN SEGMENT


void resetAllSSDDigits() {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	GPIOA -> ODR |= ((uint32_t) (0x80));
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint32_t) (0x8));
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <resetAllSSDDigits+0x44>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <resetAllSSDDigits+0x44>)
 800042e:	2108      	movs	r1, #8
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= ((uint32_t) (0x400));
 8000434:	23a0      	movs	r3, #160	; 0xa0
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	00c9      	lsls	r1, r1, #3
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint32_t) (0x2));
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <resetAllSSDDigits+0x44>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b03      	ldr	r3, [pc, #12]	; (8000458 <resetAllSSDDigits+0x44>)
 800044c:	2102      	movs	r1, #2
 800044e:	430a      	orrs	r2, r1
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	50000400 	.word	0x50000400

0800045c <setSSDDigit>:

void setSSDDigit(uint8_t digit) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	0002      	movs	r2, r0
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	701a      	strb	r2, [r3, #0]
	* 		   D3	=>	PA10
	* 		   D4	=>	PB1
    */

	// Ã¶nce hepsini kapat
	resetAllSSDDigits();
 8000468:	f7ff ffd4 	bl	8000414 <resetAllSSDDigits>
	// ** //

	switch(digit) {
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d021      	beq.n	80004b8 <setSSDDigit+0x5c>
 8000474:	dc27      	bgt.n	80004c6 <setSSDDigit+0x6a>
 8000476:	2b03      	cmp	r3, #3
 8000478:	d015      	beq.n	80004a6 <setSSDDigit+0x4a>
 800047a:	dc24      	bgt.n	80004c6 <setSSDDigit+0x6a>
 800047c:	2b01      	cmp	r3, #1
 800047e:	d002      	beq.n	8000486 <setSSDDigit+0x2a>
 8000480:	2b02      	cmp	r3, #2
 8000482:	d009      	beq.n	8000498 <setSSDDigit+0x3c>
		break;
	case 4:
		GPIOB -> ODR &= ~((uint32_t) (0x2)); //0010
		break;
	default:
		break;
 8000484:	e01f      	b.n	80004c6 <setSSDDigit+0x6a>
		GPIOA -> ODR &= ~((uint32_t) (0x80)); //1000 0000
 8000486:	23a0      	movs	r3, #160	; 0xa0
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	23a0      	movs	r3, #160	; 0xa0
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	438a      	bics	r2, r1
 8000494:	615a      	str	r2, [r3, #20]
		break;
 8000496:	e017      	b.n	80004c8 <setSSDDigit+0x6c>
		GPIOB -> ODR &= ~((uint32_t) (0x8)); // 1000
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <setSSDDigit+0x74>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <setSSDDigit+0x74>)
 800049e:	2108      	movs	r1, #8
 80004a0:	438a      	bics	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
		break;
 80004a4:	e010      	b.n	80004c8 <setSSDDigit+0x6c>
		GPIOA -> ODR &= ~((uint32_t) (0x400)); // 0100 0000 0000
 80004a6:	23a0      	movs	r3, #160	; 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	4908      	ldr	r1, [pc, #32]	; (80004d4 <setSSDDigit+0x78>)
 80004b2:	400a      	ands	r2, r1
 80004b4:	615a      	str	r2, [r3, #20]
		break;
 80004b6:	e007      	b.n	80004c8 <setSSDDigit+0x6c>
		GPIOB -> ODR &= ~((uint32_t) (0x2)); //0010
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <setSSDDigit+0x74>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <setSSDDigit+0x74>)
 80004be:	2102      	movs	r1, #2
 80004c0:	438a      	bics	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
		break;
 80004c4:	e000      	b.n	80004c8 <setSSDDigit+0x6c>
		break;
 80004c6:	46c0      	nop			; (mov r8, r8)
	}
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	50000400 	.word	0x50000400
 80004d4:	fffffbff 	.word	0xfffffbff

080004d8 <dispNumberDigitInSSD>:

void dispNumberDigitInSSD(uint8_t zeroToFifteen, uint8_t SSDDigit) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	0002      	movs	r2, r0
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	1c0a      	adds	r2, r1, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	setSSDDigit(SSDDigit);
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ffb4 	bl	800045c <setSSDDigit>

	//CLEAR
		GPIOA->ODR &= ~(1U << 0); //PA0    A
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	2101      	movs	r1, #1
 8000500:	438a      	bics	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 1); //PA1    B
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2102      	movs	r1, #2
 8000510:	438a      	bics	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 4); //PA4    F
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2110      	movs	r1, #16
 8000520:	438a      	bics	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 5); //PA5    G
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2120      	movs	r1, #32
 8000530:	438a      	bics	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 12); //PA12  C
 8000534:	23a0      	movs	r3, #160	; 0xa0
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	49e1      	ldr	r1, [pc, #900]	; (80008c4 <dispNumberDigitInSSD+0x3ec>)
 8000540:	400a      	ands	r2, r1
 8000542:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 11); //PA11  E
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	23a0      	movs	r3, #160	; 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	49de      	ldr	r1, [pc, #888]	; (80008c8 <dispNumberDigitInSSD+0x3f0>)
 8000550:	400a      	ands	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1U << 6); //PA6    D
 8000554:	23a0      	movs	r3, #160	; 0xa0
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	438a      	bics	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 6); //PB6    .
 8000564:	4bd9      	ldr	r3, [pc, #868]	; (80008cc <dispNumberDigitInSSD+0x3f4>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	4bd8      	ldr	r3, [pc, #864]	; (80008cc <dispNumberDigitInSSD+0x3f4>)
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	438a      	bics	r2, r1
 800056e:	615a      	str	r2, [r3, #20]

		switch(zeroToFifteen){
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d900      	bls.n	800057a <dispNumberDigitInSSD+0xa2>
 8000578:	e299      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
 800057a:	009a      	lsls	r2, r3, #2
 800057c:	4bd4      	ldr	r3, [pc, #848]	; (80008d0 <dispNumberDigitInSSD+0x3f8>)
 800057e:	18d3      	adds	r3, r2, r3
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	469f      	mov	pc, r3
			case 0:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2101      	movs	r1, #1
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2102      	movs	r1, #2
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 80005a4:	23a0      	movs	r3, #160	; 0xa0
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	0149      	lsls	r1, r1, #5
 80005b2:	430a      	orrs	r2, r1
 80005b4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 80005b6:	23a0      	movs	r3, #160	; 0xa0
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	430a      	orrs	r2, r1
 80005c4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	23a0      	movs	r3, #160	; 0xa0
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0109      	lsls	r1, r1, #4
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 80005d8:	23a0      	movs	r3, #160	; 0xa0
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	2110      	movs	r1, #16
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
				break;
 80005e8:	e261      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 1:
				GPIOA->ODR |= (1U << 1); //PA1    B
 80005ea:	23a0      	movs	r3, #160	; 0xa0
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	2102      	movs	r1, #2
 80005f6:	430a      	orrs	r2, r1
 80005f8:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0149      	lsls	r1, r1, #5
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
				break;
 800060c:	e24f      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 2:
				GPIOA->ODR |= (1U << 0); //PA0    A
 800060e:	23a0      	movs	r3, #160	; 0xa0
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	23a0      	movs	r3, #160	; 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 800061e:	23a0      	movs	r3, #160	; 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	23a0      	movs	r3, #160	; 0xa0
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2102      	movs	r1, #2
 800062a:	430a      	orrs	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0109      	lsls	r1, r1, #4
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000650:	23a0      	movs	r3, #160	; 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2120      	movs	r1, #32
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
				break;
 8000660:	e225      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 3:
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000672:	23a0      	movs	r3, #160	; 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2102      	movs	r1, #2
 800067e:	430a      	orrs	r2, r1
 8000680:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000682:	23a0      	movs	r3, #160	; 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0149      	lsls	r1, r1, #5
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000694:	23a0      	movs	r3, #160	; 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	23a0      	movs	r3, #160	; 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2120      	movs	r1, #32
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
				break;
 80006b4:	e1fb      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 4:
				GPIOA->ODR |= (1U << 1); //PA1    B
 80006b6:	23a0      	movs	r3, #160	; 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2102      	movs	r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0149      	lsls	r1, r1, #5
 80006d4:	430a      	orrs	r2, r1
 80006d6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 80006d8:	23a0      	movs	r3, #160	; 0xa0
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2110      	movs	r1, #16
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	23a0      	movs	r3, #160	; 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2120      	movs	r1, #32
 80006f4:	430a      	orrs	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
				break;
 80006f8:	e1d9      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 5:
				GPIOA->ODR |= (1U << 0); //PA0    A
 80006fa:	23a0      	movs	r3, #160	; 0xa0
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 800070a:	23a0      	movs	r3, #160	; 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0149      	lsls	r1, r1, #5
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2110      	movs	r1, #16
 8000738:	430a      	orrs	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 800073c:	23a0      	movs	r3, #160	; 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2120      	movs	r1, #32
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
				break;
 800074c:	e1af      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 6:
				GPIOA->ODR |= (1U << 0); //PA0    A
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 12); //PA12  C
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	23a0      	movs	r3, #160	; 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0149      	lsls	r1, r1, #5
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 6); //PA6    D
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 11); //PA11  E
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	0109      	lsls	r1, r1, #4
 800078e:	430a      	orrs	r2, r1
 8000790:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 4); //PA4    F
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2110      	movs	r1, #16
 800079e:	430a      	orrs	r2, r1
 80007a0:	615a      	str	r2, [r3, #20]
			    GPIOA->ODR |= (1U << 5); //PA5    G
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	23a0      	movs	r3, #160	; 0xa0
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	2120      	movs	r1, #32
 80007ae:	430a      	orrs	r2, r1
 80007b0:	615a      	str	r2, [r3, #20]
				break;
 80007b2:	e17c      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 7:
				GPIOA->ODR |= (1U << 0); //PA0    A
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	2101      	movs	r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2102      	movs	r1, #2
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0149      	lsls	r1, r1, #5
 80007e2:	430a      	orrs	r2, r1
 80007e4:	615a      	str	r2, [r3, #20]
				break;
 80007e6:	e162      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 8:
				GPIOA->ODR |= (1U << 0); //PA0    A
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2101      	movs	r1, #1
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	695a      	ldr	r2, [r3, #20]
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2102      	movs	r1, #2
 8000804:	430a      	orrs	r2, r1
 8000806:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2110      	movs	r1, #16
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2120      	movs	r1, #32
 8000824:	430a      	orrs	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	0149      	lsls	r1, r1, #5
 8000836:	430a      	orrs	r2, r1
 8000838:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	695a      	ldr	r2, [r3, #20]
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0109      	lsls	r1, r1, #4
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
				break;
 800085c:	e127      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 9:
				GPIOA->ODR |= (1U << 0); //PA0    A
 800085e:	23a0      	movs	r3, #160	; 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	695a      	ldr	r2, [r3, #20]
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2102      	movs	r1, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2110      	movs	r1, #16
 800088a:	430a      	orrs	r2, r1
 800088c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2120      	movs	r1, #32
 800089a:	430a      	orrs	r2, r1
 800089c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	23a0      	movs	r3, #160	; 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0149      	lsls	r1, r1, #5
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2140      	movs	r1, #64	; 0x40
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
				break;
 80008c0:	e0f5      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	ffffefff 	.word	0xffffefff
 80008c8:	fffff7ff 	.word	0xfffff7ff
 80008cc:	50000400 	.word	0x50000400
 80008d0:	08001720 	.word	0x08001720
			case 10: //A
				GPIOA->ODR |= (1U << 0); //PA0    A
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2101      	movs	r1, #1
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2102      	movs	r1, #2
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2110      	movs	r1, #16
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	23a0      	movs	r3, #160	; 0xa0
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2120      	movs	r1, #32
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	0149      	lsls	r1, r1, #5
 8000922:	430a      	orrs	r2, r1
 8000924:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000926:	23a0      	movs	r3, #160	; 0xa0
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	23a0      	movs	r3, #160	; 0xa0
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0109      	lsls	r1, r1, #4
 8000934:	430a      	orrs	r2, r1
 8000936:	615a      	str	r2, [r3, #20]
				break;
 8000938:	e0b9      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 11: //B
				GPIOA->ODR |= (1U << 0); //PA0    A
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2102      	movs	r1, #2
 8000956:	430a      	orrs	r2, r1
 8000958:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2110      	movs	r1, #16
 8000966:	430a      	orrs	r2, r1
 8000968:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	2120      	movs	r1, #32
 8000976:	430a      	orrs	r2, r1
 8000978:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0149      	lsls	r1, r1, #5
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 800098c:	23a0      	movs	r3, #160	; 0xa0
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	695a      	ldr	r2, [r3, #20]
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	0109      	lsls	r1, r1, #4
 800099a:	430a      	orrs	r2, r1
 800099c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	23a0      	movs	r3, #160	; 0xa0
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	430a      	orrs	r2, r1
 80009ac:	615a      	str	r2, [r3, #20]
				break;
 80009ae:	e07e      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>
			case 12: //C
				GPIOA->ODR |= (1U << 0); //PA0    A
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 80009c0:	23a0      	movs	r3, #160	; 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	430a      	orrs	r2, r1
 80009e0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	2110      	movs	r1, #16
 80009ee:	430a      	orrs	r2, r1
 80009f0:	615a      	str	r2, [r3, #20]
				break;
 80009f2:	e05c      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>

			case 13: //D
				GPIOA->ODR |= (1U << 0); //PA0    A
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	23a0      	movs	r3, #160	; 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000a04:	23a0      	movs	r3, #160	; 0xa0
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	695a      	ldr	r2, [r3, #20]
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2102      	movs	r1, #2
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 12); //PA12  C
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0149      	lsls	r1, r1, #5
 8000a22:	430a      	orrs	r2, r1
 8000a24:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000a26:	23a0      	movs	r3, #160	; 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	430a      	orrs	r2, r1
 8000a34:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 11); //PA11  E
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0109      	lsls	r1, r1, #4
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	2110      	movs	r1, #16
 8000a54:	430a      	orrs	r2, r1
 8000a56:	615a      	str	r2, [r3, #20]
				break;
 8000a58:	e029      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>

			case 14: //#
				GPIOA->ODR |= (1U << 0); //PA0    A
 8000a5a:	23a0      	movs	r3, #160	; 0xa0
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	695a      	ldr	r2, [r3, #20]
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 1); //PA1    B
 8000a6a:	23a0      	movs	r3, #160	; 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2102      	movs	r1, #2
 8000a76:	430a      	orrs	r2, r1
 8000a78:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 5); //PA5    G
 8000a7a:	23a0      	movs	r3, #160	; 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	23a0      	movs	r3, #160	; 0xa0
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	2120      	movs	r1, #32
 8000a86:	430a      	orrs	r2, r1
 8000a88:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1U << 4); //PA4    F
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	23a0      	movs	r3, #160	; 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	2110      	movs	r1, #16
 8000a96:	430a      	orrs	r2, r1
 8000a98:	615a      	str	r2, [r3, #20]
				break;
 8000a9a:	e008      	b.n	8000aae <dispNumberDigitInSSD+0x5d6>

			case 15: //*
				GPIOA->ODR |= (1U << 6); //PA6    D
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	695a      	ldr	r2, [r3, #20]
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	615a      	str	r2, [r3, #20]

				break;
 8000aac:	46c0      	nop			; (mov r8, r8)

			}
		}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)

08000ab8 <delay>:


void delay(volatile uint32_t s) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000ac0:	e002      	b.n	8000ac8 <delay+0x10>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f9      	bne.n	8000ac2 <delay+0xa>
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <setRCCForSSD>:

// PINLERE GORE AYARLAMAN LAZIM
void setRCCForSSD() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	// A ve B pinlerini aÃ§
	RCC -> IOPENR |= (3U);
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <setRCCForSSD+0x18>)
 8000ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <setRCCForSSD+0x18>)
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000

08000af4 <setMODERForSSD>:


void setMODERForSSD() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	// FOR A (ONLY FOR SSD PINS)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx 01 01 01 xx xx 01 01 01 01 xx xx 01 01
	// 00 00 00	01 01 01 00 00 01 01 01 01 00 00 01 01 = 0x1505505
	// 11 11 11	01 01 01 11 11 01 01 01 01 11 11 01 01 = 0xFD5F55F5
	GPIOA -> MODER |= (uint32_t) (0x1505505);
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <setMODERForSSD+0x44>)
 8000b04:	430a      	orrs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER &= (uint32_t) (0xFD5F55F5);
 8000b08:	23a0      	movs	r3, #160	; 0xa0
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	490a      	ldr	r1, [pc, #40]	; (8000b3c <setMODERForSSD+0x48>)
 8000b14:	400a      	ands	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
	// FOR B (ONLY FOR SSD PINS)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx xx xx xx xx xx xx xx xx xx 01 xx 01 xx
	// 	  								   01 00 01 00 = 0x44
	// 11 11 11 11 11 11 11 11 11 01 11 11 11 11 01 11 = 0xFFFFFF77
	GPIOB -> MODER |= (uint32_t) (0x404);
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <setMODERForSSD+0x4c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <setMODERForSSD+0x4c>)
 8000b1e:	4909      	ldr	r1, [pc, #36]	; (8000b44 <setMODERForSSD+0x50>)
 8000b20:	430a      	orrs	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= (uint32_t) (0xFFFFDFF7);
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <setMODERForSSD+0x4c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <setMODERForSSD+0x4c>)
 8000b2a:	4907      	ldr	r1, [pc, #28]	; (8000b48 <setMODERForSSD+0x54>)
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	01505505 	.word	0x01505505
 8000b3c:	fd5f55f5 	.word	0xfd5f55f5
 8000b40:	50000400 	.word	0x50000400
 8000b44:	00000404 	.word	0x00000404
 8000b48:	ffffdff7 	.word	0xffffdff7

08000b4c <setRCCForKeypad>:
typedef enum keypadButton{keypadBut0 = 0, keypadBut1, keypadBut2, keypadBut3, keypadBut4,
	keypadBut5, keypadBut6, keypadBut7, keypadBut8, keypadBut9, keypadButA,
	keypadButB, keypadButC, keypadButD, keypadButHash, keypadButAst, none} keypadBut_t;


void setRCCForKeypad() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	// A ve B pins are open
	RCC -> IOPENR |= (3U);
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <setRCCForKeypad+0x18>)
 8000b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <setRCCForKeypad+0x18>)
 8000b56:	2103      	movs	r1, #3
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000

08000b68 <setMODERForKeypad>:

void setMODERForKeypad() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	// ROW setting
	GPIOB -> MODER &= ~(3U << 4*2);
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b72:	4936      	ldr	r1, [pc, #216]	; (8000c4c <setMODERForKeypad+0xe4>)
 8000b74:	400a      	ands	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 4*2);
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	0049      	lsls	r1, r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

	GPIOB -> MODER &= ~(3U << 5*2);
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b8c:	4930      	ldr	r1, [pc, #192]	; (8000c50 <setMODERForKeypad+0xe8>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 5*2);
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	00c9      	lsls	r1, r1, #3
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]

	GPIOB -> MODER &= ~(3U << 9*2);
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000ba6:	492b      	ldr	r1, [pc, #172]	; (8000c54 <setMODERForKeypad+0xec>)
 8000ba8:	400a      	ands	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 9*2);
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	02c9      	lsls	r1, r1, #11
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]

	GPIOB -> MODER &= ~(3U << 8*2);
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bc0:	4925      	ldr	r1, [pc, #148]	; (8000c58 <setMODERForKeypad+0xf0>)
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER |= (1U << 8*2);
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0249      	lsls	r1, r1, #9
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]

	//COLUMN (INPUT) setting
	GPIOB -> MODER &= ~(3U << 8*2);
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bda:	491f      	ldr	r1, [pc, #124]	; (8000c58 <setMODERForKeypad+0xf0>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= ~(3U << 2*2);
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000be6:	2130      	movs	r1, #48	; 0x30
 8000be8:	438a      	bics	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= ~(3U << 0*2);
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER &= ~(3U << 9*2);
 8000bf8:	23a0      	movs	r3, #160	; 0xa0
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	4914      	ldr	r1, [pc, #80]	; (8000c54 <setMODERForKeypad+0xec>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]

	//COLUMN PUPDR setting
	GPIOB -> PUPDR |= (2U << 8*2);
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	0289      	lsls	r1, r1, #10
 8000c12:	430a      	orrs	r2, r1
 8000c14:	60da      	str	r2, [r3, #12]
	GPIOB -> PUPDR |= (2U << 2*2);
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	60da      	str	r2, [r3, #12]
	GPIOB -> PUPDR |= (2U << 0*2);
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <setMODERForKeypad+0xe0>)
 8000c28:	2102      	movs	r1, #2
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	60da      	str	r2, [r3, #12]
	GPIOA -> PUPDR |= (2U << 9*2);
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	23a0      	movs	r3, #160	; 0xa0
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0309      	lsls	r1, r1, #12
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	50000400 	.word	0x50000400
 8000c4c:	fffffcff 	.word	0xfffffcff
 8000c50:	fffff3ff 	.word	0xfffff3ff
 8000c54:	fff3ffff 	.word	0xfff3ffff
 8000c58:	fffcffff 	.word	0xfffcffff

08000c5c <setInterruptForKeypad>:

void setInterruptForKeypad(){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// C1 -> PB8
	EXTI -> EXTICR[2] |= (1U << 0*8);
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	669a      	str	r2, [r3, #104]	; 0x68

	// C2 -> PB2
	EXTI -> EXTICR[0] |= (1U << 2*8);
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c70:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	430a      	orrs	r2, r1
 8000c78:	661a      	str	r2, [r3, #96]	; 0x60

	// C3 -> PB0
	EXTI -> EXTICR[0] |= (1U << 0*8);
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	661a      	str	r2, [r3, #96]	; 0x60

	// C4 -> PA9
	EXTI -> EXTICR[2] |= (0U << 1*8);
 8000c86:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000c8c:	669a      	str	r2, [r3, #104]	; 0x68

	EXTI -> RTSR1 |= (1U << 9);
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0089      	lsls	r1, r1, #2
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
	EXTI -> RTSR1 |= (1U << 0);
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
	EXTI -> RTSR1 |= (1U << 2);
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cae:	2104      	movs	r1, #4
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
	EXTI -> RTSR1 |= (1U << 8);
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0049      	lsls	r1, r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

	EXTI -> IMR1 |= (1U << 9);
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	58d3      	ldr	r3, [r2, r3]
 8000cc8:	491b      	ldr	r1, [pc, #108]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	508b      	str	r3, [r1, r2]
	EXTI -> IMR1 |= (1U << 0);
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	4917      	ldr	r1, [pc, #92]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	508b      	str	r3, [r1, r2]
	EXTI -> IMR1 |= (1U << 2);
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	58d3      	ldr	r3, [r2, r3]
 8000cea:	4913      	ldr	r1, [pc, #76]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	508b      	str	r3, [r1, r2]
	EXTI -> IMR1 |= (1U << 8);
 8000cf4:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	58d3      	ldr	r3, [r2, r3]
 8000cfa:	490f      	ldr	r1, [pc, #60]	; (8000d38 <setInterruptForKeypad+0xdc>)
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	0052      	lsls	r2, r2, #1
 8000d00:	4313      	orrs	r3, r2
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	508b      	str	r3, [r1, r2]

	NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f7ff fb01 	bl	8000310 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000d0e:	2005      	movs	r0, #5
 8000d10:	f7ff fae4 	bl	80002dc <__NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI2_3_IRQn, 0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2006      	movs	r0, #6
 8000d18:	f7ff fafa 	bl	8000310 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000d1c:	2006      	movs	r0, #6
 8000d1e:	f7ff fadd 	bl	80002dc <__NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2007      	movs	r0, #7
 8000d26:	f7ff faf3 	bl	8000310 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f7ff fad6 	bl	80002dc <__NVIC_EnableIRQ>
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40021800 	.word	0x40021800

08000d3c <clearAllKeypadRows>:

void clearAllKeypadRows() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	GPIOB -> ODR &= ~((0x10U));
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d46:	2110      	movs	r1, #16
 8000d48:	438a      	bics	r2, r1
 8000d4a:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~((0x20U));
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d52:	2120      	movs	r1, #32
 8000d54:	438a      	bics	r2, r1
 8000d56:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~((0x200U));
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d5e:	4907      	ldr	r1, [pc, #28]	; (8000d7c <clearAllKeypadRows+0x40>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~((0x100U));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <clearAllKeypadRows+0x3c>)
 8000d6a:	4905      	ldr	r1, [pc, #20]	; (8000d80 <clearAllKeypadRows+0x44>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	50000400 	.word	0x50000400
 8000d7c:	fffffdff 	.word	0xfffffdff
 8000d80:	fffffeff 	.word	0xfffffeff

08000d84 <setAllKeypadRows>:

void setAllKeypadRows() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	GPIOB -> ODR |= ((uint16_t) (0x10));
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000d8e:	2110      	movs	r1, #16
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint16_t) (0x20));
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint16_t) (0x200));
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	0089      	lsls	r1, r1, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= ((uint16_t) (0x100));
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <setAllKeypadRows+0x40>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0049      	lsls	r1, r1, #1
 8000db8:	430a      	orrs	r2, r1
 8000dba:	615a      	str	r2, [r3, #20]
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	50000400 	.word	0x50000400

08000dc8 <detectButton>:

keypadBut_t detectButton() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	clearAllKeypadRows();
 8000dce:	f7ff ffb5 	bl	8000d3c <clearAllKeypadRows>
	keypadBut_t button = none;
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	701a      	strb	r2, [r3, #0]

	// only R1
	setKeypadRow(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 f8ab 	bl	8000f34 <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <detectButton+0x168>)
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <detectButton+0x2a>
		//1
		button = keypadBut1;
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e01b      	b.n	8000e2a <detectButton+0x62>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 8000df2:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <detectButton+0x168>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	2204      	movs	r2, #4
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <detectButton+0x3c>
		//2
		button = keypadBut2;
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	2202      	movs	r2, #2
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e012      	b.n	8000e2a <detectButton+0x62>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <detectButton+0x168>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <detectButton+0x4e>
		//3
		button = keypadBut3;
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	2203      	movs	r2, #3
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e009      	b.n	8000e2a <detectButton+0x62>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	d002      	beq.n	8000e2a <detectButton+0x62>
		//A
		button = keypadButA;
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	220a      	movs	r2, #10
 8000e28:	701a      	strb	r2, [r3, #0]
	}

	//  only R2
	setKeypadRow(2);
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f000 f882 	bl	8000f34 <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <detectButton+0x168>)
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <detectButton+0x7c>
		//4
		button = keypadBut4;
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	2204      	movs	r2, #4
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e01b      	b.n	8000e7c <detectButton+0xb4>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <detectButton+0x168>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2204      	movs	r2, #4
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d003      	beq.n	8000e56 <detectButton+0x8e>
		//5
		button = keypadBut5;
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	2205      	movs	r2, #5
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e012      	b.n	8000e7c <detectButton+0xb4>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <detectButton+0x168>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <detectButton+0xa0>
		//6
		button = keypadBut6;
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	2206      	movs	r2, #6
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e009      	b.n	8000e7c <detectButton+0xb4>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4013      	ands	r3, r2
 8000e74:	d002      	beq.n	8000e7c <detectButton+0xb4>
		//B
		button = keypadButB;
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	220b      	movs	r2, #11
 8000e7a:	701a      	strb	r2, [r3, #0]
	}

	//  only R3
	setKeypadRow(3);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f859 	bl	8000f34 <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <detectButton+0x168>)
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d003      	beq.n	8000e96 <detectButton+0xce>
		//7
		button = keypadBut7;
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	2207      	movs	r2, #7
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e01b      	b.n	8000ece <detectButton+0x106>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <detectButton+0x168>)
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d003      	beq.n	8000ea8 <detectButton+0xe0>
		//8
		button = keypadBut8;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e012      	b.n	8000ece <detectButton+0x106>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <detectButton+0x168>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2201      	movs	r2, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d003      	beq.n	8000eba <detectButton+0xf2>
		//9
		button = keypadBut9;
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	2209      	movs	r2, #9
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e009      	b.n	8000ece <detectButton+0x106>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d002      	beq.n	8000ece <detectButton+0x106>
		//C
		button = keypadButC;
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	220c      	movs	r2, #12
 8000ecc:	701a      	strb	r2, [r3, #0]
	}

	//  only R4
	setKeypadRow(4);
 8000ece:	2004      	movs	r0, #4
 8000ed0:	f000 f830 	bl	8000f34 <setKeypadRow>
	if(GPIOB -> IDR & ((uint16_t) (0x100))) {
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <detectButton+0x168>)
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <detectButton+0x120>
		//*
		button = keypadButAst;
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e01b      	b.n	8000f20 <detectButton+0x158>
	} else if(GPIOB -> IDR & ((uint16_t) (0x4))) {
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <detectButton+0x168>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2204      	movs	r2, #4
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d003      	beq.n	8000efa <detectButton+0x132>
		//0
		button = keypadBut0;
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e012      	b.n	8000f20 <detectButton+0x158>
	} else if(GPIOB -> IDR & ((uint16_t) (0x1))) {
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <detectButton+0x168>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d003      	beq.n	8000f0c <detectButton+0x144>
		//#
		button = keypadButHash;
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	220e      	movs	r2, #14
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e009      	b.n	8000f20 <detectButton+0x158>
	} else if(GPIOA -> IDR & ((uint16_t) (0x200))) {
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4013      	ands	r3, r2
 8000f18:	d002      	beq.n	8000f20 <detectButton+0x158>
		//D
		button = keypadButD;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	220d      	movs	r2, #13
 8000f1e:	701a      	strb	r2, [r3, #0]
	}

	setAllKeypadRows();
 8000f20:	f7ff ff30 	bl	8000d84 <setAllKeypadRows>

	return button;
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	50000400 	.word	0x50000400

08000f34 <setKeypadRow>:

void setKeypadRow(uint8_t key) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	701a      	strb	r2, [r3, #0]
	clearAllKeypadRows();
 8000f40:	f7ff fefc 	bl	8000d3c <clearAllKeypadRows>

	switch(key){
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d01e      	beq.n	8000f8a <setKeypadRow+0x56>
 8000f4c:	dc25      	bgt.n	8000f9a <setKeypadRow+0x66>
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d013      	beq.n	8000f7a <setKeypadRow+0x46>
 8000f52:	dc22      	bgt.n	8000f9a <setKeypadRow+0x66>
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d002      	beq.n	8000f5e <setKeypadRow+0x2a>
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d007      	beq.n	8000f6c <setKeypadRow+0x38>
	case 4:
		GPIOB -> ODR |= ((uint16_t) (0x100));
		break;
	default:

		break;
 8000f5c:	e01d      	b.n	8000f9a <setKeypadRow+0x66>
		GPIOB -> ODR |= ((uint16_t) (0x10));
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <setKeypadRow+0x70>)
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <setKeypadRow+0x70>)
 8000f64:	2110      	movs	r1, #16
 8000f66:	430a      	orrs	r2, r1
 8000f68:	615a      	str	r2, [r3, #20]
		break;
 8000f6a:	e017      	b.n	8000f9c <setKeypadRow+0x68>
		GPIOB -> ODR |= ((uint16_t) (0x20));
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <setKeypadRow+0x70>)
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <setKeypadRow+0x70>)
 8000f72:	2120      	movs	r1, #32
 8000f74:	430a      	orrs	r2, r1
 8000f76:	615a      	str	r2, [r3, #20]
		break;
 8000f78:	e010      	b.n	8000f9c <setKeypadRow+0x68>
		GPIOB -> ODR |= ((uint16_t) (0x200));
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <setKeypadRow+0x70>)
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <setKeypadRow+0x70>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0089      	lsls	r1, r1, #2
 8000f84:	430a      	orrs	r2, r1
 8000f86:	615a      	str	r2, [r3, #20]
		break;
 8000f88:	e008      	b.n	8000f9c <setKeypadRow+0x68>
		GPIOB -> ODR |= ((uint16_t) (0x100));
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <setKeypadRow+0x70>)
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <setKeypadRow+0x70>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0049      	lsls	r1, r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	615a      	str	r2, [r3, #20]
		break;
 8000f98:	e000      	b.n	8000f9c <setKeypadRow+0x68>
		break;
 8000f9a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	50000400 	.word	0x50000400

08000fa8 <__NVIC_EnableIRQ>:
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fba:	d809      	bhi.n	8000fd0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_EnableIRQ+0x30>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	000a      	movs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff0:	d828      	bhi.n	8001044 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <__NVIC_SetPriority+0xd4>)
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	33c0      	adds	r3, #192	; 0xc0
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	589b      	ldr	r3, [r3, r2]
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	0011      	movs	r1, r2
 8001008:	2203      	movs	r2, #3
 800100a:	400a      	ands	r2, r1
 800100c:	00d2      	lsls	r2, r2, #3
 800100e:	21ff      	movs	r1, #255	; 0xff
 8001010:	4091      	lsls	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	43d2      	mvns	r2, r2
 8001016:	401a      	ands	r2, r3
 8001018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	401a      	ands	r2, r3
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	2303      	movs	r3, #3
 800102a:	4003      	ands	r3, r0
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001030:	481f      	ldr	r0, [pc, #124]	; (80010b0 <__NVIC_SetPriority+0xd4>)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b25b      	sxtb	r3, r3
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	33c0      	adds	r3, #192	; 0xc0
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	501a      	str	r2, [r3, r0]
}
 8001042:	e031      	b.n	80010a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001044:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <__NVIC_SetPriority+0xd8>)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	0019      	movs	r1, r3
 800104c:	230f      	movs	r3, #15
 800104e:	400b      	ands	r3, r1
 8001050:	3b08      	subs	r3, #8
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3306      	adds	r3, #6
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	3304      	adds	r3, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1dfa      	adds	r2, r7, #7
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	0011      	movs	r1, r2
 8001064:	2203      	movs	r2, #3
 8001066:	400a      	ands	r2, r1
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	21ff      	movs	r1, #255	; 0xff
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	43d2      	mvns	r2, r2
 8001072:	401a      	ands	r2, r3
 8001074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	401a      	ands	r2, r3
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	2303      	movs	r3, #3
 8001086:	4003      	ands	r3, r0
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <__NVIC_SetPriority+0xd8>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	001c      	movs	r4, r3
 8001094:	230f      	movs	r3, #15
 8001096:	4023      	ands	r3, r4
 8001098:	3b08      	subs	r3, #8
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	430a      	orrs	r2, r1
 800109e:	3306      	adds	r3, #6
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	18c3      	adds	r3, r0, r3
 80010a4:	3304      	adds	r3, #4
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b003      	add	sp, #12
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <EXTI0_1_IRQHandler>:
int button;
void delay(volatile uint32_t);
volatile int counter = 0;
int buttonx[4];

void EXTI0_1_IRQHandler() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	button = detectButton();
 80010bc:	f7ff fe84 	bl	8000dc8 <detectButton>
 80010c0:	0002      	movs	r2, r0
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <EXTI0_1_IRQHandler+0x20>)
 80010c4:	601a      	str	r2, [r3, #0]
	EXTI -> RPR1 |= (1 << 0);
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <EXTI0_1_IRQHandler+0x24>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <EXTI0_1_IRQHandler+0x24>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	430a      	orrs	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000020 	.word	0x20000020
 80010dc:	40021800 	.word	0x40021800

080010e0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
		button = detectButton();
 80010e4:	f7ff fe70 	bl	8000dc8 <detectButton>
 80010e8:	0002      	movs	r2, r0
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <EXTI2_3_IRQHandler+0x20>)
 80010ec:	601a      	str	r2, [r3, #0]
		EXTI -> RPR1 |= (1 << 2);
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <EXTI2_3_IRQHandler+0x24>)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <EXTI2_3_IRQHandler+0x24>)
 80010f4:	2104      	movs	r1, #4
 80010f6:	430a      	orrs	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000020 	.word	0x20000020
 8001104:	40021800 	.word	0x40021800

08001108 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	if ( (EXTI-> RPR1 >> 8) & 1){
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <EXTI4_15_IRQHandler+0x54>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	2201      	movs	r2, #1
 8001114:	4013      	ands	r3, r2
 8001116:	d00b      	beq.n	8001130 <EXTI4_15_IRQHandler+0x28>
		button = detectButton();
 8001118:	f7ff fe56 	bl	8000dc8 <detectButton>
 800111c:	0002      	movs	r2, r0
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <EXTI4_15_IRQHandler+0x58>)
 8001120:	601a      	str	r2, [r3, #0]
		EXTI -> RPR1 |= (1 << 8);
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <EXTI4_15_IRQHandler+0x54>)
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <EXTI4_15_IRQHandler+0x54>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0049      	lsls	r1, r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	60da      	str	r2, [r3, #12]
	}
	if ( (EXTI-> RPR1 >> 9) & 1){
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <EXTI4_15_IRQHandler+0x54>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a5b      	lsrs	r3, r3, #9
 8001136:	2201      	movs	r2, #1
 8001138:	4013      	ands	r3, r2
 800113a:	d00b      	beq.n	8001154 <EXTI4_15_IRQHandler+0x4c>
			button = detectButton();
 800113c:	f7ff fe44 	bl	8000dc8 <detectButton>
 8001140:	0002      	movs	r2, r0
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <EXTI4_15_IRQHandler+0x58>)
 8001144:	601a      	str	r2, [r3, #0]
			EXTI -> RPR1 |= (1 << 9);
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <EXTI4_15_IRQHandler+0x54>)
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <EXTI4_15_IRQHandler+0x54>)
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0089      	lsls	r1, r1, #2
 8001150:	430a      	orrs	r2, r1
 8001152:	60da      	str	r2, [r3, #12]
		}
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40021800 	.word	0x40021800
 8001160:	20000020 	.word	0x20000020

08001164 <main>:

int main(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	BSP_systemInit();
 800116a:	f7ff f93f 	bl	80003ec <BSP_systemInit>
	int amp,freq;
	button = detectButton(); //
 800116e:	f7ff fe2b 	bl	8000dc8 <detectButton>
 8001172:	0002      	movs	r2, r0
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <main+0x58>)
 8001176:	601a      	str	r2, [r3, #0]
	if(button==10){ // keypad pressed B or not
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x58>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d10a      	bne.n	8001196 <main+0x32>
		amp = number(); // making entered data amplitude
 8001180:	f000 f81e 	bl	80011c0 <number>
 8001184:	0003      	movs	r3, r0
 8001186:	603b      	str	r3, [r7, #0]
		init_pwma(amp); //setting signal
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	f000 f966 	bl	800145c <init_pwma>
		setting1(); //lighting sdd for entered data
 8001190:	f000 fa1a 	bl	80015c8 <setting1>
 8001194:	e00d      	b.n	80011b2 <main+0x4e>
		}

	else if(button==11){ // keypad pressed A or not
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <main+0x58>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b0b      	cmp	r3, #11
 800119c:	d109      	bne.n	80011b2 <main+0x4e>
		freq = number();// making entered data frequency
 800119e:	f000 f80f 	bl	80011c0 <number>
 80011a2:	0003      	movs	r3, r0
 80011a4:	607b      	str	r3, [r7, #4]
		init_pwmf(freq); //setting signal
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 f8cb 	bl	8001344 <init_pwmf>
		setting(); //lighting sdd for entered data
 80011ae:	f000 f9eb 	bl	8001588 <setting>
	}
    return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000020 	.word	0x20000020

080011c0 <number>:

int number(void){ //The number function is used to assign an array to entered data.
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	int i=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
	int j;
	button = -1;
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <number+0x17c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	4252      	negs	r2, r2
 80011d0:	601a      	str	r2, [r3, #0]
	for( i = 0 ; i < 5 ; i++){
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	e063      	b.n	80012a0 <number+0xe0>
		button = detectButton();
 80011d8:	f7ff fdf6 	bl	8000dc8 <detectButton>
 80011dc:	0002      	movs	r2, r0
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <number+0x17c>)
 80011e0:	601a      	str	r2, [r3, #0]
	if(button == 0 || button == 1 || button == 2 || button == 3 || button == 4 || button == 5 || button == 6 || button == 7 || button == 8 || button == 9 || button == 10 || button == 11|| button == 12 || button == 13 || button == 14 || button == 15){
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <number+0x17c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d03b      	beq.n	8001262 <number+0xa2>
 80011ea:	4b54      	ldr	r3, [pc, #336]	; (800133c <number+0x17c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d037      	beq.n	8001262 <number+0xa2>
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <number+0x17c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d033      	beq.n	8001262 <number+0xa2>
 80011fa:	4b50      	ldr	r3, [pc, #320]	; (800133c <number+0x17c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d02f      	beq.n	8001262 <number+0xa2>
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <number+0x17c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d02b      	beq.n	8001262 <number+0xa2>
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <number+0x17c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d027      	beq.n	8001262 <number+0xa2>
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <number+0x17c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d023      	beq.n	8001262 <number+0xa2>
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <number+0x17c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d01f      	beq.n	8001262 <number+0xa2>
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <number+0x17c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d01b      	beq.n	8001262 <number+0xa2>
 800122a:	4b44      	ldr	r3, [pc, #272]	; (800133c <number+0x17c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b09      	cmp	r3, #9
 8001230:	d017      	beq.n	8001262 <number+0xa2>
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <number+0x17c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d013      	beq.n	8001262 <number+0xa2>
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <number+0x17c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b0b      	cmp	r3, #11
 8001240:	d00f      	beq.n	8001262 <number+0xa2>
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <number+0x17c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	d00b      	beq.n	8001262 <number+0xa2>
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <number+0x17c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b0d      	cmp	r3, #13
 8001250:	d007      	beq.n	8001262 <number+0xa2>
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <number+0x17c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b0e      	cmp	r3, #14
 8001258:	d003      	beq.n	8001262 <number+0xa2>
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <number+0x17c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d11b      	bne.n	800129a <number+0xda>
			buttonx[i] = detectButton();
 8001262:	f7ff fdb1 	bl	8000dc8 <detectButton>
 8001266:	0001      	movs	r1, r0
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <number+0x180>)
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	50d1      	str	r1, [r2, r3]
			dispNumberDigitInSSD((uint8_t) button, (uint8_t) i-1 );
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <number+0x17c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	0019      	movs	r1, r3
 8001280:	0010      	movs	r0, r2
 8001282:	f7ff f929 	bl	80004d8 <dispNumberDigitInSSD>
			button = -1;
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <number+0x17c>)
 8001288:	2201      	movs	r2, #1
 800128a:	4252      	negs	r2, r2
 800128c:	601a      	str	r2, [r3, #0]
			if(buttonx[i] == 14){
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <number+0x180>)
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	58d3      	ldr	r3, [r2, r3]
 8001296:	2b0e      	cmp	r3, #14
 8001298:	d024      	beq.n	80012e4 <number+0x124>
	for( i = 0 ; i < 5 ; i++){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3301      	adds	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	dd98      	ble.n	80011d8 <number+0x18>
				goto a1;
			}
	}
	}
			if(i >= 4){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	dd1d      	ble.n	80012e8 <number+0x128>
		for(j = 0; j < 5; j++){
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	e014      	b.n	80012dc <number+0x11c>
						dispNumberDigitInSSD((uint8_t) buttonx[j], (uint8_t) j+1 );
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <number+0x180>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	58d3      	ldr	r3, [r2, r3]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	0019      	movs	r1, r3
 80012c6:	0010      	movs	r0, r2
 80012c8:	f7ff f906 	bl	80004d8 <dispNumberDigitInSSD>
						delay(1000);
 80012cc:	23fa      	movs	r3, #250	; 0xfa
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fbf1 	bl	8000ab8 <delay>
		for(j = 0; j < 5; j++){
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b04      	cmp	r3, #4
 80012e0:	dde7      	ble.n	80012b2 <number+0xf2>
		}
		}
 a1:
 80012e2:	e001      	b.n	80012e8 <number+0x128>
				goto a1;
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	e000      	b.n	80012ea <number+0x12a>
 a1:
 80012e8:	46c0      	nop			; (mov r8, r8)
	return ((buttonx[1] * 10^0) + (buttonx[2] * 10^1) + (buttonx[3] * 10^2) + (buttonx[4] * 10^3));
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <number+0x180>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	0013      	movs	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	0019      	movs	r1, r3
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <number+0x180>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	0013      	movs	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	189b      	adds	r3, r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	001a      	movs	r2, r3
 8001306:	2301      	movs	r3, #1
 8001308:	4053      	eors	r3, r2
 800130a:	18c9      	adds	r1, r1, r3
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <number+0x180>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	0013      	movs	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	189b      	adds	r3, r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	001a      	movs	r2, r3
 800131a:	2302      	movs	r3, #2
 800131c:	4053      	eors	r3, r2
 800131e:	18c9      	adds	r1, r1, r3
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <number+0x180>)
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	0013      	movs	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	189b      	adds	r3, r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	001a      	movs	r2, r3
 800132e:	2303      	movs	r3, #3
 8001330:	4053      	eors	r3, r2
 8001332:	18cb      	adds	r3, r1, r3
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000020 	.word	0x20000020
 8001340:	20000024 	.word	0x20000024

08001344 <init_pwmf>:
void init_pwmf(int freq){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	//WORKING WITH PB3 PIN'S AF2 FUNCTION AS TIM2_CH2
	//enable gpiob
	RCC->IOPENR |= (1U << 1);
 800134c:	4b3f      	ldr	r3, [pc, #252]	; (800144c <init_pwmf+0x108>)
 800134e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001350:	4b3e      	ldr	r3, [pc, #248]	; (800144c <init_pwmf+0x108>)
 8001352:	2102      	movs	r1, #2
 8001354:	430a      	orrs	r2, r1
 8001356:	635a      	str	r2, [r3, #52]	; 0x34
	//enable tim2 clock
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN;
 8001358:	4b3c      	ldr	r3, [pc, #240]	; (800144c <init_pwmf+0x108>)
 800135a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <init_pwmf+0x108>)
 800135e:	2101      	movs	r1, #1
 8001360:	430a      	orrs	r2, r1
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c

	//select AF from moder
	GPIOB->MODER &= ~(3U << 2*3);
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <init_pwmf+0x10c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <init_pwmf+0x10c>)
 800136a:	21c0      	movs	r1, #192	; 0xc0
 800136c:	438a      	bics	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2U << 2*3);
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <init_pwmf+0x10c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <init_pwmf+0x10c>)
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
	//set alternate function 2 // 0010 FOR AF2
	GPIOB->AFR[0] &= ~(0XFU << 4*3);
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <init_pwmf+0x10c>)
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <init_pwmf+0x10c>)
 8001382:	4934      	ldr	r1, [pc, #208]	; (8001454 <init_pwmf+0x110>)
 8001384:	400a      	ands	r2, r1
 8001386:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |= (2U << 4*3);
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <init_pwmf+0x10c>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <init_pwmf+0x10c>)
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	0189      	lsls	r1, r1, #6
 8001392:	430a      	orrs	r2, r1
 8001394:	621a      	str	r2, [r3, #32]

    // zero out the control register just in case
	TIM2->CR1 = 0;
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	05db      	lsls	r3, r3, #23
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

    // Select PWM Mode 1
    TIM2->CCMR1 |= (6U << 12);
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	21c0      	movs	r1, #192	; 0xc0
 80013aa:	01c9      	lsls	r1, r1, #7
 80013ac:	430a      	orrs	r2, r1
 80013ae:	619a      	str	r2, [r3, #24]
    // Preload Enable
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE;
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	05db      	lsls	r3, r3, #23
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0109      	lsls	r1, r1, #4
 80013be:	430a      	orrs	r2, r1
 80013c0:	619a      	str	r2, [r3, #24]

    // Capture compare ch2 enable
    TIM2->CCER |= TIM_CCER_CC2E;
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	2110      	movs	r1, #16
 80013ce:	430a      	orrs	r2, r1
 80013d0:	621a      	str	r2, [r3, #32]

    // zero out counter
    TIM2->CNT = 0;
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
    // 1 ms interrupt

    TIM2->PSC = (3200/freq)-1;
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	23c8      	movs	r3, #200	; 0xc8
 80013de:	0118      	lsls	r0, r3, #4
 80013e0:	f7fe fe90 	bl	8000104 <__divsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 4999;
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	4a19      	ldr	r2, [pc, #100]	; (8001458 <init_pwmf+0x114>)
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c

    // zero out duty

    	for(int i =  0; i<258; i++){
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e006      	b.n	800140a <init_pwmf+0xc6>
    		TIM2->CCR2 = i;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
    	for(int i =  0; i<258; i++){
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	2381      	movs	r3, #129	; 0x81
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf3      	blt.n	80013fc <init_pwmf+0xb8>
    }

    // Update interrupt enable
    TIM2->DIER |= (1 << 0);
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	60da      	str	r2, [r3, #12]

    // TIM1 Enable
    TIM2->CR1 |= TIM_CR1_CEN;
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

    NVIC_SetPriority(TIM2_IRQn, 1);
 8001434:	2101      	movs	r1, #1
 8001436:	200f      	movs	r0, #15
 8001438:	f7ff fdd0 	bl	8000fdc <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800143c:	200f      	movs	r0, #15
 800143e:	f7ff fdb3 	bl	8000fa8 <__NVIC_EnableIRQ>

}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	40021000 	.word	0x40021000
 8001450:	50000400 	.word	0x50000400
 8001454:	ffff0fff 	.word	0xffff0fff
 8001458:	00001387 	.word	0x00001387

0800145c <init_pwma>:

void init_pwma(int amp ){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	//WORKING WITH PB3 PIN'S AF2 FUNCTION AS TIM2_CH2
	//enable gpiob
	RCC->IOPENR |= (1U << 1);
 8001464:	4b3d      	ldr	r3, [pc, #244]	; (800155c <init_pwma+0x100>)
 8001466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001468:	4b3c      	ldr	r3, [pc, #240]	; (800155c <init_pwma+0x100>)
 800146a:	2102      	movs	r1, #2
 800146c:	430a      	orrs	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
	//enable tim2 clock
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN;
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <init_pwma+0x100>)
 8001472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <init_pwma+0x100>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c

	//select AF from moder
	GPIOB->MODER &= ~(3U << 2*3);
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <init_pwma+0x104>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b37      	ldr	r3, [pc, #220]	; (8001560 <init_pwma+0x104>)
 8001482:	21c0      	movs	r1, #192	; 0xc0
 8001484:	438a      	bics	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2U << 2*3);
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <init_pwma+0x104>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <init_pwma+0x104>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
	//set alternate function 2 // 0010 FOR AF2
	GPIOB->AFR[0] &= ~(0XFU << 4*3);
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <init_pwma+0x104>)
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <init_pwma+0x104>)
 800149a:	4932      	ldr	r1, [pc, #200]	; (8001564 <init_pwma+0x108>)
 800149c:	400a      	ands	r2, r1
 800149e:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |= (2U << 4*3);
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <init_pwma+0x104>)
 80014a2:	6a1a      	ldr	r2, [r3, #32]
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <init_pwma+0x104>)
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0189      	lsls	r1, r1, #6
 80014aa:	430a      	orrs	r2, r1
 80014ac:	621a      	str	r2, [r3, #32]

    // zero out the control register just in case
	TIM2->CR1 = 0;
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

    // Select PWM Mode 1
    TIM2->CCMR1 |= (6U << 12);
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	699a      	ldr	r2, [r3, #24]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	21c0      	movs	r1, #192	; 0xc0
 80014c2:	01c9      	lsls	r1, r1, #7
 80014c4:	430a      	orrs	r2, r1
 80014c6:	619a      	str	r2, [r3, #24]
    // Preload Enable
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE;
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0109      	lsls	r1, r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	619a      	str	r2, [r3, #24]

    // Capture compare ch2 enable
    TIM2->CCER |= TIM_CCER_CC2E;
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	6a1a      	ldr	r2, [r3, #32]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	05db      	lsls	r3, r3, #23
 80014e4:	2110      	movs	r1, #16
 80014e6:	430a      	orrs	r2, r1
 80014e8:	621a      	str	r2, [r3, #32]

    // zero out counter
    TIM2->CNT = 0;
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    // 1 ms interrupt

    TIM2->PSC = 63;
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	223f      	movs	r2, #63	; 0x3f
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 4999;
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <init_pwma+0x10c>)
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c

    // zero out duty


    for(int i=0; i<(amp*5*10^3); i++){
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e006      	b.n	8001516 <init_pwma+0xba>
    	TIM2->CCR2 = i;
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
    for(int i=0; i<(amp*5*10^3); i++){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2232      	movs	r2, #50	; 0x32
 800151a:	4353      	muls	r3, r2
 800151c:	2203      	movs	r2, #3
 800151e:	4053      	eors	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf0      	blt.n	8001508 <init_pwma+0xac>
    }

    // Update interrupt enable
    TIM2->DIER |= (1 << 0);
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	05db      	lsls	r3, r3, #23
 8001530:	2101      	movs	r1, #1
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]

    // TIM1 Enable
    TIM2->CR1 |= TIM_CR1_CEN;
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	2101      	movs	r1, #1
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

    NVIC_SetPriority(TIM2_IRQn, 1);
 8001546:	2101      	movs	r1, #1
 8001548:	200f      	movs	r0, #15
 800154a:	f7ff fd47 	bl	8000fdc <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800154e:	200f      	movs	r0, #15
 8001550:	f7ff fd2a 	bl	8000fa8 <__NVIC_EnableIRQ>

}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	50000400 	.word	0x50000400
 8001564:	ffff0fff 	.word	0xffff0fff
 8001568:	00001387 	.word	0x00001387

0800156c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

	TIM2->SR &= ~(1U << 0);
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <setting>:

void setting(){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	while(1){
		int j;
		for(j = 1; j < 5; j++){
 800158e:	2301      	movs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	e012      	b.n	80015ba <setting+0x32>
						dispNumberDigitInSSD((uint8_t) buttonx[j], (uint8_t) j );
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <setting+0x3c>)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	58d3      	ldr	r3, [r2, r3]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	0011      	movs	r1, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7fe ff97 	bl	80004d8 <dispNumberDigitInSSD>
						delay(1000);
 80015aa:	23fa      	movs	r3, #250	; 0xfa
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff fa82 	bl	8000ab8 <delay>
		for(j = 1; j < 5; j++){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	dde9      	ble.n	8001594 <setting+0xc>
	while(1){
 80015c0:	e7e5      	b.n	800158e <setting+0x6>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000024 	.word	0x20000024

080015c8 <setting1>:
		}
	}
}
void setting1(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

		int j;
		for(j = 1; j < 5; j++){
 80015ce:	2301      	movs	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e012      	b.n	80015fa <setting1+0x32>
						dispNumberDigitInSSD((uint8_t) buttonx[j], (uint8_t) j );
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <setting1+0x44>)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	58d3      	ldr	r3, [r2, r3]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7fe ff77 	bl	80004d8 <dispNumberDigitInSSD>
						delay(1000);
 80015ea:	23fa      	movs	r3, #250	; 0xfa
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fa62 	bl	8000ab8 <delay>
		for(j = 1; j < 5; j++){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	dde9      	ble.n	80015d4 <setting1+0xc>
	}
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	20000024 	.word	0x20000024

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 f832 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800164a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800164c:	f7ff fff7 	bl	800163e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	; (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001676:	f000 f823 	bl	80016c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800167a:	f7ff fd73 	bl	8001164 <main>

0800167e <LoopForever>:

LoopForever:
  b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   r0, =_estack
 8001680:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800168c:	08001768 	.word	0x08001768
  ldr r2, =_sbss
 8001690:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001694:	20000038 	.word	0x20000038

08001698 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_IRQHandler>
	...

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	001a      	movs	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	18d2      	adds	r2, r2, r3
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000034 	.word	0x20000034

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	2600      	movs	r6, #0
 80016c4:	4d0c      	ldr	r5, [pc, #48]	; (80016f8 <__libc_init_array+0x38>)
 80016c6:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c8:	1b64      	subs	r4, r4, r5
 80016ca:	10a4      	asrs	r4, r4, #2
 80016cc:	42a6      	cmp	r6, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	2600      	movs	r6, #0
 80016d2:	f000 f819 	bl	8001708 <_init>
 80016d6:	4d0a      	ldr	r5, [pc, #40]	; (8001700 <__libc_init_array+0x40>)
 80016d8:	4c0a      	ldr	r4, [pc, #40]	; (8001704 <__libc_init_array+0x44>)
 80016da:	1b64      	subs	r4, r4, r5
 80016dc:	10a4      	asrs	r4, r4, #2
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	00b3      	lsls	r3, r6, #2
 80016e6:	58eb      	ldr	r3, [r5, r3]
 80016e8:	4798      	blx	r3
 80016ea:	3601      	adds	r6, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	00b3      	lsls	r3, r6, #2
 80016f0:	58eb      	ldr	r3, [r5, r3]
 80016f2:	4798      	blx	r3
 80016f4:	3601      	adds	r6, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08001760 	.word	0x08001760
 80016fc:	08001760 	.word	0x08001760
 8001700:	08001760 	.word	0x08001760
 8001704:	08001764 	.word	0x08001764

08001708 <_init>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr

08001714 <_fini>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr
