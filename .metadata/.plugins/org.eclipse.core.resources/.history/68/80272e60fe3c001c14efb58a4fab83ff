/*
 * asm.s
 *
 * author: Furkan Cayci
 *
 * description: Added the necessary stuff for turning on the green LED on the
 * G031K8 Nucleo board. Mostly for teaching.
 */


.syntax unified
.cpu cortex-m0plus
.fpu softvfp
.thumb


/* make linker see this */
.global Reset_Handler

/* get these from linker script */
.word _sdata
.word _edata
.word _sbss
.word _ebss


/* define peripheral addresses from RM0444 page 57, Tables 3-4 */
.equ RCC_BASE, (0x40021000) // RCC base address
.equ RCC_IOPENR, (RCC_BASE + (0x34)) // RCC IOPENR register offset

.equ GPIOC_BASE, (0x50000800) // GPIOC base address
.equ GPIOB_BASE, (0x50000400) // GPIOB base address
.equ GPIOB_MODER, (GPIOB_BASE + (0x00)) // GPIOC MODER register offset
.equ GPIOC_MODER, (GPIOC_BASE + (0x00)) // GPIOC MODER register offset
.equ GPIOC_ODR, (GPIOC_BASE + (0x14)) // GPIOC ODR offset
.equ GPIOB_ODR, (GPIOB_BASE + (0x14))
.equ GPIOB_IDR, (GPIOB_BASE + (0X10)) // GPIOB IDR offset
.equ GPIOC_IDR, (GPIOC_BASE + (0X10)) // GPIOC IDR offset

/* vector table, +1 thumb mode */
.section .vectors
vector_table:
 .word _estack /* Stack pointer */
 .word Reset_Handler +1 /* Reset handler */
 .word Default_Handler +1 /* NMI handler */
 .word Default_Handler +1 /* HardFault handler */
 /* add rest of them here if needed */


/* reset handler */
.section .text
Reset_Handler:
 /* set stack pointer */
 ldr r0, =_estack
 mov sp, r0

 /* initialize data and bss
  * not necessary for rom only code
  * */
 bl init_data
 /* call main */
 bl main
 /* trap if returned */
 b .


/* initialize data and bss sections */
.section .text
init_data:

 /* copy rom to ram */
 ldr r0, =_sdata
 ldr r1, =_edata
 ldr r2, =_sidata
 movs r3, #0
 b LoopCopyDataInit

 CopyDataInit:
  ldr r4, [r2, r3]
  str r4, [r0, r3]
  adds r3, r3, #4

 LoopCopyDataInit:
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit

 /* zero bss */
 ldr r2, =_sbss
 ldr r4, =_ebss
 movs r3, #0
 b LoopFillZerobss

 FillZerobss:
  str r3, [r2]
  adds r2, r2, #4

 LoopFillZerobss:
  cmp r2, r4
  bcc FillZerobss

 bx lr


/* default handler */
.section .text
Default_Handler:
 b Default_Handler


/* main function */
.section .text
main:
//////114-119 => B serisi pinlerin aktif edilmesi
 ldr r6, =RCC_IOPENR
 ldr r5, [r6]
 movs r4, 0x2 //r4=0010
 orrs r5, r5, r4 //r5=xxxx....xx1x
 str r5, [r6]
///////////////////////////////////////
/////130-136 => PB4 pinine bağlı butonun giriş olarak tanımlanması
	 ldr r6, =GPIOB_MODER
	 ldr r5, [r6]
	 ldr r4, =0x300//r4=0011 0000 0000
	 mvns r4, r4    //r4=1100 1111 1111
	 ands r5,r5,r4//r5=xxxx....xx00 xxxx xxxx
	 ldr r4, =0x100
 orrs r5,r5,r4 //r5=xxxx....xx01 xxxx xxxx
 str r5,[r6]
//////131-135=> PB5 pinindeki LEDe mantıksal 1 gönderilmesi

 // led sondu
loopOff3:
ldr r6, =GPIOB_ODR
  ldr r5, [r6]
  ldr r4, =0x80 //r4=0010 0000
  mvns r4,r4 //r4=1101 1111
  ands r5, r5, r4 //r5=xxxx.....xx0x xxxx
  str r5, [r6]
  bl loopDelay
  bl loopOn1

loopOn1:
/////142-148=>PB5 pinindeki LEDe mantıksal 0 gönderilmesi

ldr r6, =GPIOB_ODR
  ldr r5, [r6]
  ldr r4, =0x80 //r4=0010 0000
  orrs r5, r5, r4 //r5=xxxx.....xx1x xxxx
  str r5, [r6]
  bl loopDelay
  bl loopOff3

loopDelay:
	ldr r4, =#2700000 // ite

loop2:

  subs r4,r4,#1
  bne loop2

bx lr


