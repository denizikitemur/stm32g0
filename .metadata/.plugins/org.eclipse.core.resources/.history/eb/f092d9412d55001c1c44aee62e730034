/*
 * sevenSegment.c
 *
 *  Created on: Dec 4, 2021
 *      Author: DENIZ
 */

#include "sevensegment.h"
#include "stm32g0xx.h"
#include <stdlib.h>
#include <math.h>


void resetAllSSDDigits() {
	DIGIT_1_P -> ODR &= DIGIT_1;
	DIGIT_2_P -> ODR &= DIGIT_2;
	DIGIT_3_P -> ODR &= DIGIT_3;
	DIGIT_4_P -> ODR &= DIGIT_4;
}

void setSSDDigit(uint8_t digit) {
   /*
    * 		   D1	=>	PA7
	* 		   D2	=>	PB3
	* 		   D3	=>	PA10
	* 		   D4	=>	PB1
    */

	// önce hepsini kapat
	resetAllSSDDigits();
	// **** //

	switch(digit) {
	case 1:
		DIGIT_1_P -> ODR |= DIGIT_1;
		break;
	case 2:
		DIGIT_2_P -> ODR |= DIGIT_2;
		break;
	case 3:
		DIGIT_3_P -> ODR |= DIGIT_3;
		break;
	case 4:
		DIGIT_4_P -> ODR |= DIGIT_4;
		break;
	default:
		break;
	}
}

void dispNumberDigitInSSD(uint8_t zeroToTen, uint8_t SSDDigit) {
	setSSDDigit(SSDDigit);

	//CLEAR
	GPIOA->ODR |= (1U << 0); //PA0 A
	GPIOA->ODR |= (1U << 1); //PA1 B
	GPIOA->ODR |= (1U << 4); //PA4 C
	GPIOA->ODR |= (1U << 5); //PA5 D
	GPIOA->ODR |= (1U << 12); //PA12 E
	GPIOA->ODR |= (1U << 11); //PA11 F
	GPIOA->ODR |= (1U << 6); //PA6 G

	switch(zeroToTen){
	case 0:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		break;
	case 1:
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		break;
	case 2:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 3:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 4:
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 5:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 6:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 7:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
	    GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		break;
	case 8:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 9:
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G
		break;
	case 10: //A
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G

	case 11: //B
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G

	case 12: //C
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G

	case 13: //D
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F

	case 14: //#
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G

	case 15: //*
		GPIOA->ODR &= ~(1U << 0); //PA0 A
		GPIOA->ODR &= ~(1U << 1); //PA1 B
		GPIOA->ODR &= ~(1U << 4); //PA4 C
		GPIOA->ODR &= ~(1U << 5); //PA5 D
		GPIOA->ODR &= ~(1U << 12); //PA12 E
		GPIOA->ODR &= ~(1U << 11); //PA11 F
		GPIOA->ODR &= ~(1U << 6); //PA6 G
	}
}


void delay(volatile uint32_t s) {
    for(; s>0; s--);
}

// PINLERE GORE AYARLAMAN LAZIM
void setRCCForSSD() {
	// A ve B pinlerini aç
	RCC -> IOPENR |= (3U);
}

// PINLERE GORE AYARLAMAN LAZIM
void setMODERForSSD() {
	// A için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx 01 01 01 xx xx 01 01 01 01 xx xx 01 01  lazım
	// 00 00 00	01 01 01 00 00 01 01 01 01 00 00 01 01 = 0x1505505  orlamak için
	// 11 11 11	01 01 01 11 11 01 01 01 01 11 11 01 01 = 0xFD5F55F5 andlemek için
	GPIOA -> MODER |= (uint32_t) (0x1505505);
	GPIOA -> MODER &= (uint32_t) (0xFD5F55F5);

	// B için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx xx xx xx xx xx xx xx xx xx 01 xx 01 xx
	// 	  								   01 00 01 00 = 0x44 orlamak için
	// 11 11 11 11 11 11 11 11 11 11 11 11 01 11 01 11 = 0xFFFFFF77 andlemek için
	GPIOB -> MODER |= (uint32_t) (0x44);
	GPIOB -> MODER &= (uint32_t) (0xFFFFFF77);
}

