#include "stm32g0xx.h"
#include<stdio.h>
void delay(volatile uint32_t);
volatile uint32_t LEDDELAY=10UL;
volatile uint32_t LEDDELAY1=80UL;
volatile uint32_t millis;


void dispNumberDigitInSSD(uint8_t zeroToFifteen, uint8_t SSDDigit) {
	setSSDDigit(SSDDigit);

	//CLEAR
	GPIOA->ODR &= ~(1U << 0); //PA0    A
	GPIOA->ODR &= ~(1U << 1); //PA1    B
	GPIOA->ODR &= ~(1U << 4); //PA4    F
	GPIOA->ODR &= ~(1U << 5); //PA5    G
	GPIOA->ODR &= ~(1U << 12); //PA12  C
	GPIOA->ODR &= ~(1U << 11); //PA11  E
	GPIOA->ODR &= ~(1U << 6); //PA6    D
	GPIOB->ODR &= ~(1U << 6); //PB6    .

	switch(zeroToFifteen){
	case 0:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 6); //PA6    D
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 4); //PA4    F
		break;
	case 1:
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 12); //PA12  C
		break;
	case 2:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 6); //PA6    D
		GPIOA->ODR |= (1U << 5); //PA5    G
		break;
	case 3:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 6); //PA6    D
		GPIOA->ODR |= (1U << 5); //PA5    G
		break;
	case 4:
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 4); //PA4    F
		GPIOA->ODR |= (1U << 5); //PA5    G
		break;
	case 5:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 6); //PA6    D
		GPIOA->ODR |= (1U << 4); //PA4    F
		GPIOA->ODR |= (1U << 5); //PA5    G
		break;
	case 6:
		GPIOA->ODR |= (1U << 0); //PA0    A
	    GPIOA->ODR |= (1U << 12); //PA12  C
	    GPIOA->ODR |= (1U << 6); //PA6    D
	    GPIOA->ODR |= (1U << 11); //PA11  E
	    GPIOA->ODR |= (1U << 4); //PA4    F
	    GPIOA->ODR |= (1U << 5); //PA5    G
		break;
	case 7:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 12); //PA12  C
		break;
	case 8:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 4); //PA4    F
		GPIOA->ODR |= (1U << 5); //PA5    G
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 6); //PA6    D
		break;
	case 9:
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 4); //PA4    F
		GPIOA->ODR |= (1U << 5); //PA5    G
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 6); //PA6    D
		break;
	case 10: //A
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 4); //PA4    F
		GPIOA->ODR |= (1U << 5); //PA5    G
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 11); //PA11  E
		break;
	case 11: //B
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 4); //PA4    F
		GPIOA->ODR |= (1U << 5); //PA5    G
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 6); //PA6    D
		break;
	case 12: //C
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 6); //PA6    D
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 4); //PA4    F
		break;

	case 13: //D
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 12); //PA12  C
		GPIOA->ODR |= (1U << 6); //PA6    D
		GPIOA->ODR |= (1U << 11); //PA11  E
		GPIOA->ODR |= (1U << 4); //PA4    F
		break;

	case 14: //#
		GPIOA->ODR |= (1U << 0); //PA0    A
		GPIOA->ODR |= (1U << 1); //PA1    B
		GPIOA->ODR |= (1U << 5); //PA5    G
		GPIOA->ODR |= (1U << 4); //PA4    F
		break;

	case 15: //*
		GPIOB->ODR |= (1U << 6); //PB6 .
		break;

	}
}

void setSSDDigit(uint8_t digit) {
   /*
    * 		   D1	=>	PA7
	* 		   D2	=>	PB3
	* 		   D3	=>	PA10
	* 		   D4	=>	PB1
    */

	// önce hepsini kapat
	resetaSSDDigits( digit);
	// **** //

	switch(digit) {
	case 1:
		GPIOA -> ODR &= ~((uint32_t) (0x80)); //1000 0000
		break;
	case 2:
		GPIOB -> ODR &= ~((uint32_t) (0x8)); // 1000
		break;
	case 3:
		GPIOA -> ODR &= ~((uint32_t) (0x400)); // 0100 0000 0000
		break;
	case 4:
		GPIOB -> ODR &= ~((uint32_t) (0x2)); //0010
		break;
	default:
		break;
	}
}
void resetaSSDDigits(digit) {
	switch(digit) {
		case 1:
			GPIOA -> ODR |= ((uint32_t) (0x80)); //1000 0000
			break;
		case 2:
			GPIOB -> ODR |= ((uint32_t) (0x8)); // 1000
			break;
		case 3:
			GPIOA -> ODR |= ((uint32_t) (0x400)); // 0100 0000 0000
			break;
		case 4:
			GPIOB -> ODR |= ((uint32_t) (0x2)); //0010
			break;
		default:
			break;
		}

}
void resetAllSSDDigits() {
	GPIOA -> ODR |= ((uint32_t) (0x80));
	GPIOB -> ODR |= ((uint32_t) (0x8));
	GPIOA -> ODR |= ((uint32_t) (0x400));
	GPIOB -> ODR |= ((uint32_t) (0x2));
}

int main(void){
	// A ve B pinlerini aç
	RCC -> IOPENR |= (3U);
	// A için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx 01 01 01 xx xx 01 01 01 01 xx xx 01 01  lazım
	// 00 00 00	01 01 01 00 00 01 01 01 01 00 00 01 01 = 0x1505505  orlamak için
	// 11 11 11	01 01 01 11 11 01 01 01 01 11 11 01 01 = 0xFD5F55F5 andlemek için
	GPIOA -> MODER |= (uint32_t) (0x1505505);
	GPIOA -> MODER &= (uint32_t) (0xFD5F55F5);

	// B için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx xx xx xx xx xx xx xx xx xx 01 xx 01 xx
	// 	  								   01 00 01 00 = 0x44 orlamak için
	// 11 11 11 11 11 11 11 11 11 11 11 11 01 11 01 11 = 0xFFFFFF77 andlemek için
	GPIOB -> MODER |= (uint32_t) (0x44);
	GPIOB -> MODER &= (uint32_t) (0xFFFFFF77);

	resetAllSSDDigits()

	dispNumberDigitInSSD((uint8_t) 4, (uint8_t) 1);
	delay(1000);
	dispNumberDigitInSSD((uint8_t) 3, (uint8_t) 2);
	delay(1000);
	dispNumberDigitInSSD((uint8_t) 15, (uint8_t) 3);
	delay(1000);
	dispNumberDigitInSSD((uint8_t) 7, (uint8_t) 4);
	delay(1000);
	resetAllSSDDigits()
	dispNumberDigitInSSD((uint8_t) 6, (uint8_t) 1);
		delay(1000);
		dispNumberDigitInSSD((uint8_t) 14, (uint8_t) 2);
		delay(1000);
		dispNumberDigitInSSD((uint8_t) 15, (uint8_t) 3);
		delay(1000);
		dispNumberDigitInSSD((uint8_t) 11, (uint8_t) 4);
		delay(1000);




return 0;
}
void delay(volatile uint32_t s) {
    for(; s>0; s--);
}
