/*
 * main.c
 *
 * author: Deniz İkitemur
 *
 * description: Using a state machine blink the external LED at different intervals. Assign each speed to a mode, and attach a button to cycle through the modes.
 */

#include "stm32g0xx.h"

#define LEDDELAY1    1600000
#define LEDDELAY2	 3200000
#define LEDDELAY5    8000000

void delay(volatile uint32_t);

void EXTI0_1_IRQHandler(void){
if (EXTI->RPR1 & (1U << 1)){
static int k = 0;
k++;
EXTI->RPR1 |= (1U << 1);
if(k>10){
k=1;
}
}
}
void TIM1_BRK_UP_TRG_COM_IRQHandler(void){
TIM1->SR &= ~(1U<<0); //clear update status register
 /* blinky LED */
static int t = 1,k;
if(t==k){
GPIOC->ODR ^= (1U << 6);
t = 1;
}
else if (t<k){
t++;
}
else t=1;
}


int main(void) {

    /* Enable GPIOA clock */
    RCC->IOPENR |= (1U << 0);

    /* Enable GPIOB clock */
    RCC->IOPENR |= (1U << 1);

    //Set up PB5 as output
    GPIOB->MODER &= ~(3U << 2*5);
    GPIOB->MODER |= (1U << 2*5);

    //Set PA5 as input
    GPIOA->MODER &= ~(3U << 2*5);


    /*setup interrrupts for inputs*/
     EXTI->EXTICR[0] |=(0U << 8*1);//PA5
     /* MASK*/
     EXTI->IMR1 |= (1U << 6);
     /*rising edge*/
     EXTI->RTSR1 |= (1U << 6);

     TIM1->DIER |= (1 << 0);// update interrupt enable
     TIM1->CR1 |= (1 << 0);// tım1 enable
     NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn,3);
     NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);

     NVIC_SetPriority(EXTI0_1_IRQn,0);
      NVIC_EnableIRQ(EXTI0_1_IRQn);


    while(1) {


    	int i = 0;

    				if (((GPIOA->IDR & (1U << 5)) == 0x20) && (i == 0)){ //0010 0000
    					for(;;){
    						GPIOB->ODR &=(0U << 5); // mode 0
    						if((GPIOA->IDR & (1U << 5)) == 0x20){
    							i++;
    							goto a0;
    						}

    					}
    				}
    				a0:

    	    	    if (((GPIOA->IDR & (1U << 5)) == 0x20) && (i == 1)){ //0010 0000
    	    	    	for(;;){

    	    	    	GPIOB->ODR |= (1U << 5); // mode 1
    	    	    	delay(LEDDELAY2);
    	    	    	GPIOB->ODR &=(0U << 5);
    	    	    	delay(LEDDELAY2);
    	    	    	if((GPIOA->IDR & (1U << 5)) == 0x20){
    	    	    		i++;
    	    	    		goto a1;
    	    	    	}

    	    	    	}
    	    	    }
    	    	    a1:


    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 2){ //0010 0000
    	    	        for(;;){

    	    	        GPIOB->ODR |= (1U << 5); // mode 2
    	    	        delay(LEDDELAY1);
    	    	        GPIOB->ODR &=(0U << 5);
    	    	        delay(LEDDELAY1);
    	    	        if((GPIOA->IDR & (1U << 5)) == 0x20){
    	    	        	i++;
    	    	            goto a2;
    	    	           }

    	    	           }
    	    	         }
    	    	       a2:

    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 3){ //0010 0000
    	    	        for(;;){

    	    	        	GPIOB->ODR |= (1U << 5); //mode 3
    	    	        	delay(LEDDELAY5);
    	    	        	GPIOB->ODR &=(0U << 5);
    	    	        	delay(LEDDELAY5);
    	    	        	if((GPIOA->IDR & (1U << 5)) == 0x20){
    	    	        	i++;
    	    	        	goto a3;
    	    	        	    	    	}
    	    	        	    	    }
    	    	    }
    	    	    a3:


    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 4){ //0010 0000
    	    	        for(;;){

    	    	        	GPIOB->ODR |= (1U << 5); // mode 4
    	    	        	delay(LEDDELAY1);
    	    	        	GPIOB->ODR &=(0U << 5);
    	    	        	delay(LEDDELAY1);
    	    	        	if((GPIOA->IDR & (1U << 5)) == 0x20){
    	    	        	i++;
    	    	        	goto a4;
    	    	        	    	    	}
    	    	        	    	    }
    	    	    }
    	    	    a4:


    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 4){ //0010 0000
    	    	        for(;;){

    	    	        	GPIOB->ODR |= (1U << 5); // mode 5
    	    	        	if((GPIOA->IDR & (1U << 5)) == 0x20){
    	    	        	i++;
    	    	        	goto a5;
    	    	        	    	    	}
    	    	        	    	    }
    	    	    }
    	    	    a5:


    	 delay(600000); //duration for press and back for the button

    }//while(1)

    return 0;
}//main funct

void delay(volatile uint32_t s) {
    for(; s>0; s--);
}
