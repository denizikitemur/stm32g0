#include "stm32g0xx.h"
#include "BSP.h"



enum {sine = 0, square, triangular, sawtooth, whiteNoise, randomDig} signal;
enum {dispMode = 0, dispAmp, dispFreq, input} displayMode;


void TIM2_IRQHandler(void){

	TIM2->SR &= ~(1U << 0);
}

void init_pwm2(){
	//WORKING WITH PB3 PIN'S AF2 FUNCTION AS TIM2_CH2
	//enable gpiob
	RCC->IOPENR |= (1U << 1);
	//enable tim2 clock
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN;


	//select AF from moder
	GPIOB->MODER &= ~(3U << 2*3);
	GPIOB->MODER |= (2U << 2*3);
	//set alternate function 2 // 0010 FOR AF2
	GPIOB->AFR[0] &= ~(0XFU << 4*3);
	GPIOB->AFR[0] |= (2U << 4*3);



    // zero out the control register just in case
	TIM2->CR1 = 0;

    // Select PWM Mode 1
    TIM2->CCMR1 |= (6U << 12);
    // Preload Enable
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE;

    // Capture compare ch2 enable
    TIM2->CCER |= TIM_CCER_CC2E;

    // zero out counter
    TIM2->CNT = 0;
    // 1 ms interrupt
    TIM2->PSC = 159;// 16 bit;
    TIM2->ARR = 4999;

    // zero out duty


    TIM2->CCR2 =0 ;

    // Update interrupt enable
    TIM2->DIER |= (1 << 0);

    // TIM1 Enable
    TIM2->CR1 |= TIM_CR1_CEN;

    NVIC_SetPriority(TIM2_IRQn, 1);
    NVIC_EnableIRQ(TIM2_IRQn);

}


keypadBut_t currentButton = none;
keypadBut_t prevButton = none;

uint8_t isInputAmp = 0;
uint8_t isInputFreq = 0;

int32_t var = 0;

int32_t amp		= 5;
int32_t freq	= 10;

void doWorkForButtons();
void sysSet();
void setSignalDisp();
void setVar();

void EXTI0_1_IRQHandler() {
	currentButton = KEY_detectButton();
	doWorkForButtons();
	EXTI -> RPR1 |= (1 << 0);
}

void EXTI2_3_IRQHandler() {
	currentButton = KEY_detectButton();
	doWorkForButtons();
	EXTI -> RPR1 |= (1 << 2);
}

void EXTI4_15_IRQHandler() {
	currentButton = KEY_detectButton();
	doWorkForButtons();
	EXTI -> RPR1 |= (1 << 8);
	EXTI -> RPR1 |= (1 << 9);
}

// bunun göz fpsine ayarlanması lazım.
// galiba 5 ms
void SysTick_Handler(){
	static volatile int8_t ct = -1;

	ct++;
	if(ct == 5) {
		SSD_disp();
		ct = 0;
	}
}

int main(void) {
	BSP_systemInit();
	init_pwm2();


	int a[128] = {
		    0x44, 0x88, 0xcc, 0x110, 0x154, 0x198, 0x1dc, 0x220, 0x264, 0x2a8,
		    0x2ec, 0x330, 0x374, 0x3b8, 0x3fc, 0x440, 0x484, 0x4c8, 0x50c, 0x550,
		    0x594, 0x5d8, 0x61c, 0x660, 0x6a4, 0x6e8, 0x72c, 0x770, 0x7b4, 0x7f8,
		    0x83c, 0x880, 0x8c4, 0x908, 0x94c, 0x990, 0x9d4, 0xa18, 0xa5c, 0xaa0,
		    0xae4, 0xb28, 0xb6c, 0xbb0, 0xbf4, 0xc38, 0xc7c, 0xcc0, 0xd04, 0xd48,
		    0xd8c, 0xdd0, 0xe14, 0xe58, 0xe9c, 0xee0, 0xf24, 0xf68, 0xfac, 0xff0,
		    0xfac, 0xf68, 0xf24, 0xee0, 0xe9c, 0xe58, 0xe14, 0xdd0, 0xd8c, 0xd48,
		    0xd04, 0xcc0, 0xc7c, 0xc38, 0xbf4, 0xbb0, 0xb6c, 0xb28, 0xae4, 0xaa0,
		    0xa5c, 0xa18, 0x9d4, 0x990, 0x94c, 0x908, 0x8c4, 0x880, 0x83c, 0x7f8,
		    0x7b4, 0x770, 0x72c, 0x6e8, 0x6a4, 0x660, 0x61c, 0x5d8, 0x594, 0x550,
		    0x50c, 0x4c8, 0x484, 0x440, 0x3fc, 0x3b8, 0x374, 0x330, 0x2ec, 0x2a8,
		    0x264, 0x220, 0x1dc, 0x198, 0x154, 0x110, 0xcc, 0x88, 0x44, 0x0
		  };


    while(1){

    	for(int i=0; i<128; i++){

    		TIM2->CCR2 = a[i];

    	}
    }
    return 0;

}


void doWorkForButtons() {
	switch(currentButton) {
	case keypadButC:
		signal++;if(signal == 6)
			signal = 0;
		break;
	case keypadButD:
		displayMode++;
		if(displayMode >= 3)
			displayMode = 0;
		break;
	case keypadButA:
		displayMode = input;
		isInputAmp = 1;
		break;
	case keypadButB:
		displayMode = input;
		isInputFreq = 1;
		break;
	case keypadButHash:
		amp = isInputAmp ? var : amp;
		freq = isInputFreq ? var : freq;
		isInputAmp = 0;
		isInputFreq = 0;
		var = 0;
		displayMode = dispMode;
		break;
	case 0:
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		setVar();
		break;
	default:
		//..
		break;
	}


	sysSet();
}

void sysSet() {
	switch(displayMode) {
	case dispAmp:
		SSD_getDigits(amp);
		break;
	case dispFreq:
		SSD_getDigits(freq);
		break;
	case dispMode:
		setSignalDisp();
		break;
	case input:
		SSD_getDigits(var);
		break;

	}
}

void setSignalDisp(){
	switch(signal) {
	case sine:
		SSD_setSine();
		break;
	case square:
		SSD_setSquare();
		break;
	case triangular:
		SSD_setTri();
		break;
	case sawtooth:
		SSD_setRamp();
		break;
	case whiteNoise:
		SSD_setWhiteNoise();
		break;
	case randomDig:
		SSD_setRandDigital();
		break;
	}
}

void setVar() {
	var *= 10;
	var += currentButton;
	SSD_getDigits(var);
}
