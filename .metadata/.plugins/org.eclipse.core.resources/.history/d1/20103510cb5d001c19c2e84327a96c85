/*
 * bsp.c
 *
 *  Created on: Dec 1, 2021
 *      Author: antih
 */
#include "stm32g0xx.h"
#include "bsp.h"
static int arr[255]={0x1f40,0x2004,0x20c8,0x218c,0x2250,0x2313,0x23d5,0x2497,0x2558,0x2618,0x26d7,0x2795,0x2852,0x290d,0x29c6,0x2a7e,0x2b35,0x2be9,0x2c9c,0x2d4c,0x2dfa,0x2ea6,0x2f50,0x2ff7,0x309c,0x313e,0x31dd,0x3279,0x3312,0x33a9,0x343c,0x34cb,0x3558,0x35e1,0x3667,0x36e9,0x3767,0x37e2,0x3859,0x38cc,0x393b,0x39a6,0x3a0d,0x3a70,0x3ace,0x3b29,0x3b7f,0x3bd1,0x3c1e,0x3c67,
		0x3cab,0x3ceb,0x3d27,0x3d5d,0x3d8f,0x3dbd,0x3de5,0x3e09,0x3e28,0x3e43,0x3e58,0x3e69,0x3e75,0x3e7d,0x3e7f,0x3e7d,0x3e75,0x3e69,0x3e58,0x3e43,0x3e28,0x3e09,0x3de5,0x3dbd,0x3d8f,0x3d5d,0x3d27,0x3ceb,0x3cab,0x3c67,0x3c1e,0x3bd1,0x3b7f,0x3b29,0x3ace,0x3a70,0x3a0d,0x39a6,0x393b,0x38cc,0x3859,0x37e2,0x3767,0x36e9,0x3667,0x35e1,0x3558,0x34cb,0x343c,0x33a9,
		0x3312,0x3279,0x31dd,0x313e,0x309c,0x2ff7,0x2f50,0x2ea6,0x2dfa,0x2d4c,0x2c9c,0x2be9,0x2b35,0x2a7e,0x29c6,0x290d,0x2852,0x2795,0x26d7,0x2618,0x2558,0x2497,0x23d5,0x2313,0x2250,0x218c,0x20c8,0x2004,0x1f40,0x1e7b,0x1db7,0x1cf3,0x1c2f,0x1b6c,0x1aaa,0x19e8,0x1927,0x1867,0x17a8,0x16ea,0x162d,0x1572,0x14b9,0x1401,0x134a,0x1296,0x11e3,0x1133,0x1085,0xfd9,
		0xf2f,0xe88,0xde3,0xd41,0xca2,0xc06,0xb6d,0xad6,0xa43,0x9b4,0x927,0x89e,0x818,0x796,0x718,0x69d,0x626,0x5b3,0x544,0x4d9,0x472,0x40f,0x3b1,0x356,0x300,0x2ae,0x261,0x218,0x1d4,0x194,0x158,0x122,0xf0,0xc2,0x9a,0x76,0x57,0x3c,0x27,0x16,0xa,0x2,0x0,0x2,0xa,0x16,0x27,0x3c,0x57,0x76,
		0x9a,0xc2,0xf0,0x122,0x158,0x194,0x1d4,0x218,0x261,0x2ae,0x300,0x356,0x3b1,0x40f,0x472,0x4d9,0x544,0x5b3,0x626,0x69d,0x718,0x796,0x818,0x89e,0x927,0x9b4,0xa43,0xad6,0xb6d,0xc06,0xca2,0xd41,0xde3,0xe88,0xf2f,0xfd9,0x1085,0x1133,0x11e3,0x1296,0x134a,0x1401,0x14b9,0x1572,0x162d,0x16ea,0x17a8,0x1867,0x1927,0x19e8,
		0x1aaa,0x1b6c,0x1c2f,0x1cf3,0x1db7,0x1e7b,0x1f40};
static int freq={50};

#define LEDDELAY    160000;









void TIM2_IRQHandler(void){

	TIM2->SR &= ~(1U << 0);
}

void init_pwm2(){
	//WORKING WITH PB3 PIN'S AF2 FUNCTION AS TIM2_CH2
	//enable gpiob
	RCC->IOPENR |= (1U << 1);
	//enable tim2 clock
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN;


	//select AF from moder
	GPIOB->MODER &= ~(3U << 2*3);
	GPIOB->MODER |= (2U << 2*3);
	//set alternate function 2 // 0010 FOR AF2
	GPIOB->AFR[0] &= ~(0XFU << 4*3);
	GPIOB->AFR[0] |= (2U << 4*3);



    // zero out the control register just in case
	TIM2->CR1 = 0;

    // Select PWM Mode 1
    TIM2->CCMR1 |= (6U << 12);
    // Preload Enable
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE;

    // Capture compare ch2 enable
    TIM2->CCER |= TIM_CCER_CC2E;

    // zero out counter
    TIM2->CNT = 0;
    // 1 ms interrupt
    TIM2->PSC = 63;// 16 bit;
    TIM2->ARR = 4999;

    // zero out duty


	int a[258] = {
			0x9c3,0xa01,0xa3e,0xa7c,0xab9,0xaf6,0xb33,0xb70,0xbac,0xbe9,0xc25,0xc60,0xc9b,0xcd6,0xd10,0xd4a,0xd83,0xdbb,0xdf3,0xe2b,0xe61,0xe97,0xecc,0xf01,0xf34,0xf67,0xf99,0xfca,0xffa,0x1029,0x1057,0x1084,0x10af,0x10da,0x1104,0x112d,0x1154,0x117b,0x11a0,0x11c4,0x11e6,0x1208,0x1228,0x1246,0x1264,0x1280,0x129b,0x12b4,0x12cc,0x12e3,
			0x12f8,0x130c,0x131e,0x132f,0x133e,0x134c,0x1359,0x1364,0x136d,0x1375,0x137b,0x1380,0x1384,0x1386,0x1386,0x1385,0x1382,0x137e,0x1378,0x1371,0x1368,0x135e,0x1353,0x1345,0x1337,0x1327,0x1315,0x1302,0x12ee,0x12d8,0x12c0,0x12a8,0x128e,0x1272,0x1255,0x1237,0x1218,0x11f7,0x11d5,0x11b2,0x118d,0x1168,0x1141,0x1119,0x10ef,0x10c5,0x109a,0x106d,0x1040,0x1011,
			0xfe2,0xfb1,0xf80,0xf4e,0xf1b,0xee7,0xeb2,0xe7c,0xe46,0xe0f,0xdd7,0xd9f,0xd66,0xd2d,0xcf3,0xcb9,0xc7e,0xc42,0xc07,0xbcb,0xb8e,0xb52,0xb15,0xad8,0xa9a,0xa5d,0xa1f,0x9e2,0x9a4,0x967,0x929,0x8ec,0x8ae,0x871,0x834,0x7f8,0x7bb,0x77f,0x744,0x708,0x6cd,0x693,0x659,0x620,0x5e7,0x5af,0x577,0x540,0x50a,0x4d4,
			0x49f,0x46b,0x438,0x406,0x3d5,0x3a4,0x375,0x346,0x319,0x2ec,0x2c1,0x297,0x26d,0x245,0x21e,0x1f9,0x1d4,0x1b1,0x18f,0x16e,0x14f,0x131,0x114,0xf8,0xde,0xc6,0xae,0x98,0x84,0x71,0x5f,0x4f,0x41,0x33,0x28,0x1e,0x15,0xe,0x8,0x4,0x1,0x0,0x0,0x2,0x6,0xb,0x11,0x19,0x22,0x2d,
			0x3a,0x48,0x57,0x68,0x7a,0x8e,0xa3,0xba,0xd2,0xeb,0x106,0x122,0x140,0x15e,0x17e,0x1a0,0x1c2,0x1e6,0x20b,0x232,0x259,0x282,0x2ac,0x2d7,0x302,0x32f,0x35d,0x38c,0x3bc,0x3ed,0x41f,0x452,0x485,0x4ba,0x4ef,0x525,0x55b,0x593,0x5cb,0x603,0x63c,0x676,0x6b0,0x6eb,0x726,0x761,0x79d,0x7da,0x816,0x853,
			0x890,0x8cd,0x90a,0x948,0x985,0x9c3
		  };


    while(1){

    	for(int i=0; i<258; i++){

    		TIM2->CCR2 = a[i];

    	}
    }

    // Update interrupt enable
    TIM2->DIER |= (1 << 0);

    // TIM1 Enable
    TIM2->CR1 |= TIM_CR1_CEN;

    NVIC_SetPriority(TIM2_IRQn, 1);
    NVIC_EnableIRQ(TIM2_IRQn);

}
