
micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000460  08000460  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000460  08000460  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000460  08000460  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000460  08000460  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000468  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800046c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800046c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015d7  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000671  00000000  00000000  00021603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00021c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  00021e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012190  00000000  00000000  00021fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002045  00000000  00000000  00034130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074077  00000000  00000000  00036175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aa1ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c4  00000000  00000000  000aa240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000004 	.word	0x20000004
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08000448 	.word	0x08000448

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000008 	.word	0x20000008
 80000fc:	08000448 	.word	0x08000448

08000100 <main>:
#define LEDDELAY4    160000

void delay(volatile uint32_t);


int main(void) {
 8000100:	b580      	push	{r7, lr}
 8000102:	b082      	sub	sp, #8
 8000104:	af00      	add	r7, sp, #0

    /* Enable GPIOA clock */
    RCC->IOPENR |= (1U << 0);
 8000106:	4b82      	ldr	r3, [pc, #520]	; (8000310 <main+0x210>)
 8000108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800010a:	4b81      	ldr	r3, [pc, #516]	; (8000310 <main+0x210>)
 800010c:	2101      	movs	r1, #1
 800010e:	430a      	orrs	r2, r1
 8000110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable GPIOB clock */
    RCC->IOPENR |= (1U << 1);
 8000112:	4b7f      	ldr	r3, [pc, #508]	; (8000310 <main+0x210>)
 8000114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000116:	4b7e      	ldr	r3, [pc, #504]	; (8000310 <main+0x210>)
 8000118:	2102      	movs	r1, #2
 800011a:	430a      	orrs	r2, r1
 800011c:	635a      	str	r2, [r3, #52]	; 0x34

    //Set up PB5 as output
    GPIOB->MODER &= ~(3U << 2*5);
 800011e:	4b7d      	ldr	r3, [pc, #500]	; (8000314 <main+0x214>)
 8000120:	681a      	ldr	r2, [r3, #0]
 8000122:	4b7c      	ldr	r3, [pc, #496]	; (8000314 <main+0x214>)
 8000124:	497c      	ldr	r1, [pc, #496]	; (8000318 <main+0x218>)
 8000126:	400a      	ands	r2, r1
 8000128:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (1U << 2*5);
 800012a:	4b7a      	ldr	r3, [pc, #488]	; (8000314 <main+0x214>)
 800012c:	681a      	ldr	r2, [r3, #0]
 800012e:	4b79      	ldr	r3, [pc, #484]	; (8000314 <main+0x214>)
 8000130:	2180      	movs	r1, #128	; 0x80
 8000132:	00c9      	lsls	r1, r1, #3
 8000134:	430a      	orrs	r2, r1
 8000136:	601a      	str	r2, [r3, #0]

    //Set PA5 as input
    GPIOA->MODER &= ~(3U << 2*5);
 8000138:	23a0      	movs	r3, #160	; 0xa0
 800013a:	05db      	lsls	r3, r3, #23
 800013c:	681a      	ldr	r2, [r3, #0]
 800013e:	23a0      	movs	r3, #160	; 0xa0
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	4975      	ldr	r1, [pc, #468]	; (8000318 <main+0x218>)
 8000144:	400a      	ands	r2, r1
 8000146:	601a      	str	r2, [r3, #0]

    while(1) {


    	int i = 0;
 8000148:	2300      	movs	r3, #0
 800014a:	607b      	str	r3, [r7, #4]

    				if (((GPIOA->IDR & (1U << 5)) == 0x20) && (i == 0)){ //0010 0000
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05db      	lsls	r3, r3, #23
 8000150:	691b      	ldr	r3, [r3, #16]
 8000152:	2220      	movs	r2, #32
 8000154:	4013      	ands	r3, r2
 8000156:	2b20      	cmp	r3, #32
 8000158:	d112      	bne.n	8000180 <main+0x80>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d10f      	bne.n	8000180 <main+0x80>
    					for(;;){
    						GPIOB->ODR &=(0U << 5); // mode 0
 8000160:	4b6c      	ldr	r3, [pc, #432]	; (8000314 <main+0x214>)
 8000162:	695b      	ldr	r3, [r3, #20]
 8000164:	4b6b      	ldr	r3, [pc, #428]	; (8000314 <main+0x214>)
 8000166:	2200      	movs	r2, #0
 8000168:	615a      	str	r2, [r3, #20]
    						if((GPIOA->IDR & (1U << 5)) == 0x20){
 800016a:	23a0      	movs	r3, #160	; 0xa0
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	691b      	ldr	r3, [r3, #16]
 8000170:	2220      	movs	r2, #32
 8000172:	4013      	ands	r3, r2
 8000174:	2b20      	cmp	r3, #32
 8000176:	d1f3      	bne.n	8000160 <main+0x60>
    							i++;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3301      	adds	r3, #1
 800017c:	607b      	str	r3, [r7, #4]
    							goto a0;
 800017e:	e000      	b.n	8000182 <main+0x82>
    						}

    					}
    				}
    				a0:
 8000180:	46c0      	nop			; (mov r8, r8)

    	    	    if (((GPIOA->IDR & (1U << 5)) == 0x20) && (i == 1)){ //0010 0000
 8000182:	23a0      	movs	r3, #160	; 0xa0
 8000184:	05db      	lsls	r3, r3, #23
 8000186:	691b      	ldr	r3, [r3, #16]
 8000188:	2220      	movs	r2, #32
 800018a:	4013      	ands	r3, r2
 800018c:	2b20      	cmp	r3, #32
 800018e:	d120      	bne.n	80001d2 <main+0xd2>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d11d      	bne.n	80001d2 <main+0xd2>
    	    	    	for(;;){

    	    	    	GPIOB->ODR |= (1U << 5); // mode 1
 8000196:	4b5f      	ldr	r3, [pc, #380]	; (8000314 <main+0x214>)
 8000198:	695a      	ldr	r2, [r3, #20]
 800019a:	4b5e      	ldr	r3, [pc, #376]	; (8000314 <main+0x214>)
 800019c:	2120      	movs	r1, #32
 800019e:	430a      	orrs	r2, r1
 80001a0:	615a      	str	r2, [r3, #20]
    	    	    	delay(LEDDELAY1);
 80001a2:	4b5e      	ldr	r3, [pc, #376]	; (800031c <main+0x21c>)
 80001a4:	0018      	movs	r0, r3
 80001a6:	f000 f8c3 	bl	8000330 <delay>
    	    	    	GPIOB->ODR &=(0U << 5);
 80001aa:	4b5a      	ldr	r3, [pc, #360]	; (8000314 <main+0x214>)
 80001ac:	695b      	ldr	r3, [r3, #20]
 80001ae:	4b59      	ldr	r3, [pc, #356]	; (8000314 <main+0x214>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	615a      	str	r2, [r3, #20]
    	    	    	delay(LEDDELAY1);
 80001b4:	4b59      	ldr	r3, [pc, #356]	; (800031c <main+0x21c>)
 80001b6:	0018      	movs	r0, r3
 80001b8:	f000 f8ba 	bl	8000330 <delay>
    	    	    	if((GPIOA->IDR & (1U << 5)) == 0x20){
 80001bc:	23a0      	movs	r3, #160	; 0xa0
 80001be:	05db      	lsls	r3, r3, #23
 80001c0:	691b      	ldr	r3, [r3, #16]
 80001c2:	2220      	movs	r2, #32
 80001c4:	4013      	ands	r3, r2
 80001c6:	2b20      	cmp	r3, #32
 80001c8:	d1e5      	bne.n	8000196 <main+0x96>
    	    	    		i++;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	3301      	adds	r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
    	    	    		goto a1;
 80001d0:	e000      	b.n	80001d4 <main+0xd4>
    	    	    	}

    	    	    	}
    	    	    }
    	    	    a1:
 80001d2:	46c0      	nop			; (mov r8, r8)


    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 2){ //0010 0000
 80001d4:	23a0      	movs	r3, #160	; 0xa0
 80001d6:	05db      	lsls	r3, r3, #23
 80001d8:	691b      	ldr	r3, [r3, #16]
 80001da:	2220      	movs	r2, #32
 80001dc:	4013      	ands	r3, r2
 80001de:	2b20      	cmp	r3, #32
 80001e0:	d120      	bne.n	8000224 <main+0x124>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	d11d      	bne.n	8000224 <main+0x124>
    	    	        for(;;){

    	    	        GPIOB->ODR |= (1U << 5); // mode 2
 80001e8:	4b4a      	ldr	r3, [pc, #296]	; (8000314 <main+0x214>)
 80001ea:	695a      	ldr	r2, [r3, #20]
 80001ec:	4b49      	ldr	r3, [pc, #292]	; (8000314 <main+0x214>)
 80001ee:	2120      	movs	r1, #32
 80001f0:	430a      	orrs	r2, r1
 80001f2:	615a      	str	r2, [r3, #20]
    	    	        delay(LEDDELAY2);
 80001f4:	4b4a      	ldr	r3, [pc, #296]	; (8000320 <main+0x220>)
 80001f6:	0018      	movs	r0, r3
 80001f8:	f000 f89a 	bl	8000330 <delay>
    	    	        GPIOB->ODR &=(0U << 5);
 80001fc:	4b45      	ldr	r3, [pc, #276]	; (8000314 <main+0x214>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	4b44      	ldr	r3, [pc, #272]	; (8000314 <main+0x214>)
 8000202:	2200      	movs	r2, #0
 8000204:	615a      	str	r2, [r3, #20]
    	    	        delay(LEDDELAY2);
 8000206:	4b46      	ldr	r3, [pc, #280]	; (8000320 <main+0x220>)
 8000208:	0018      	movs	r0, r3
 800020a:	f000 f891 	bl	8000330 <delay>
    	    	        if((GPIOA->IDR & (1U << 5)) == 0x20){
 800020e:	23a0      	movs	r3, #160	; 0xa0
 8000210:	05db      	lsls	r3, r3, #23
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	2220      	movs	r2, #32
 8000216:	4013      	ands	r3, r2
 8000218:	2b20      	cmp	r3, #32
 800021a:	d1e5      	bne.n	80001e8 <main+0xe8>
    	    	        	i++;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	3301      	adds	r3, #1
 8000220:	607b      	str	r3, [r7, #4]
    	    	            goto a2;
 8000222:	e000      	b.n	8000226 <main+0x126>
    	    	           }

    	    	           }
    	    	         }
    	    	       a2:
 8000224:	46c0      	nop			; (mov r8, r8)

    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 3){ //0010 0000
 8000226:	23a0      	movs	r3, #160	; 0xa0
 8000228:	05db      	lsls	r3, r3, #23
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	2220      	movs	r2, #32
 800022e:	4013      	ands	r3, r2
 8000230:	2b20      	cmp	r3, #32
 8000232:	d120      	bne.n	8000276 <main+0x176>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b03      	cmp	r3, #3
 8000238:	d11d      	bne.n	8000276 <main+0x176>
    	    	        for(;;){

    	    	        	GPIOB->ODR |= (1U << 5); //mode 3
 800023a:	4b36      	ldr	r3, [pc, #216]	; (8000314 <main+0x214>)
 800023c:	695a      	ldr	r2, [r3, #20]
 800023e:	4b35      	ldr	r3, [pc, #212]	; (8000314 <main+0x214>)
 8000240:	2120      	movs	r1, #32
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
    	    	        	delay(LEDDELAY3);
 8000246:	4b37      	ldr	r3, [pc, #220]	; (8000324 <main+0x224>)
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f871 	bl	8000330 <delay>
    	    	        	GPIOB->ODR &=(0U << 5);
 800024e:	4b31      	ldr	r3, [pc, #196]	; (8000314 <main+0x214>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4b30      	ldr	r3, [pc, #192]	; (8000314 <main+0x214>)
 8000254:	2200      	movs	r2, #0
 8000256:	615a      	str	r2, [r3, #20]
    	    	        	delay(LEDDELAY3);
 8000258:	4b32      	ldr	r3, [pc, #200]	; (8000324 <main+0x224>)
 800025a:	0018      	movs	r0, r3
 800025c:	f000 f868 	bl	8000330 <delay>
    	    	        	if((GPIOA->IDR & (1U << 5)) == 0x20){
 8000260:	23a0      	movs	r3, #160	; 0xa0
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	691b      	ldr	r3, [r3, #16]
 8000266:	2220      	movs	r2, #32
 8000268:	4013      	ands	r3, r2
 800026a:	2b20      	cmp	r3, #32
 800026c:	d1e5      	bne.n	800023a <main+0x13a>
    	    	        	i++;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
    	    	        	goto a3;
 8000274:	e000      	b.n	8000278 <main+0x178>
    	    	        	    	    	}
    	    	        	    	    }
    	    	    }
    	    	    a3:
 8000276:	46c0      	nop			; (mov r8, r8)


    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 4){ //0010 0000
 8000278:	23a0      	movs	r3, #160	; 0xa0
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	2220      	movs	r2, #32
 8000280:	4013      	ands	r3, r2
 8000282:	2b20      	cmp	r3, #32
 8000284:	d120      	bne.n	80002c8 <main+0x1c8>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b04      	cmp	r3, #4
 800028a:	d11d      	bne.n	80002c8 <main+0x1c8>
    	    	        for(;;){

    	    	        	GPIOB->ODR |= (1U << 5); // mode 4
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <main+0x214>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <main+0x214>)
 8000292:	2120      	movs	r1, #32
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
    	    	        	delay(LEDDELAY4);
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <main+0x228>)
 800029a:	0018      	movs	r0, r3
 800029c:	f000 f848 	bl	8000330 <delay>
    	    	        	GPIOB->ODR &=(0U << 5);
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <main+0x214>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <main+0x214>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
    	    	        	delay(LEDDELAY4);
 80002aa:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <main+0x228>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 f83f 	bl	8000330 <delay>
    	    	        	if((GPIOA->IDR & (1U << 5)) == 0x20){
 80002b2:	23a0      	movs	r3, #160	; 0xa0
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	2220      	movs	r2, #32
 80002ba:	4013      	ands	r3, r2
 80002bc:	2b20      	cmp	r3, #32
 80002be:	d1e5      	bne.n	800028c <main+0x18c>
    	    	        	i++;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
    	    	        	goto a4;
 80002c6:	e000      	b.n	80002ca <main+0x1ca>
    	    	        	    	    	}
    	    	        	    	    }
    	    	    }
    	    	    a4:
 80002c8:	46c0      	nop			; (mov r8, r8)


    	    	    if ((GPIOA->IDR & (1U << 5)) == 0x20 && i == 5){ //0010 0000
 80002ca:	23a0      	movs	r3, #160	; 0xa0
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	2220      	movs	r2, #32
 80002d2:	4013      	ands	r3, r2
 80002d4:	2b20      	cmp	r3, #32
 80002d6:	d113      	bne.n	8000300 <main+0x200>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b05      	cmp	r3, #5
 80002dc:	d110      	bne.n	8000300 <main+0x200>
    	    	        for(;;){

    	    	        	GPIOB->ODR |= (1U << 5); // mode 5
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <main+0x214>)
 80002e0:	695a      	ldr	r2, [r3, #20]
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <main+0x214>)
 80002e4:	2120      	movs	r1, #32
 80002e6:	430a      	orrs	r2, r1
 80002e8:	615a      	str	r2, [r3, #20]
    	    	        	if((GPIOA->IDR & (1U << 5)) == 0x20){
 80002ea:	23a0      	movs	r3, #160	; 0xa0
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	2220      	movs	r2, #32
 80002f2:	4013      	ands	r3, r2
 80002f4:	2b20      	cmp	r3, #32
 80002f6:	d1f2      	bne.n	80002de <main+0x1de>
    	    	        	i++;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
    	    	        	goto a5;
 80002fe:	e000      	b.n	8000302 <main+0x202>
    	    	        	    	    	}
    	    	        	    	    }
    	    	    }
    	    	    a5:
 8000300:	46c0      	nop			; (mov r8, r8)
		    i=0;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]


    	 delay(600000); //duration for press and back for the button
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <main+0x22c>)
 8000308:	0018      	movs	r0, r3
 800030a:	f000 f811 	bl	8000330 <delay>
    while(1) {
 800030e:	e71b      	b.n	8000148 <main+0x48>
 8000310:	40021000 	.word	0x40021000
 8000314:	50000400 	.word	0x50000400
 8000318:	fffff3ff 	.word	0xfffff3ff
 800031c:	0030d400 	.word	0x0030d400
 8000320:	00186a00 	.word	0x00186a00
 8000324:	000c3500 	.word	0x000c3500
 8000328:	00027100 	.word	0x00027100
 800032c:	000927c0 	.word	0x000927c0

08000330 <delay>:
    }//while(1)

    return 0;
}//main funct

void delay(volatile uint32_t s) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000338:	e002      	b.n	8000340 <delay+0x10>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3b01      	subs	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1f9      	bne.n	800033a <delay+0xa>
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b002      	add	sp, #8
 800034e:	bd80      	pop	{r7, pc}

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <NMI_Handler+0x4>

08000356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <HardFault_Handler+0x4>

0800035c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000374:	f000 f832 	bl	80003dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f7ff fff7 	bl	800037e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f823 	bl	8000400 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80003ba:	f7ff fea1 	bl	8000100 <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003cc:	08000468 	.word	0x08000468
  ldr r2, =_sbss
 80003d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003d4:	20000024 	.word	0x20000024

080003d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_IRQHandler>
	...

080003dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <HAL_IncTick+0x1c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	001a      	movs	r2, r3
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <HAL_IncTick+0x20>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	18d2      	adds	r2, r2, r3
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <HAL_IncTick+0x20>)
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	20000000 	.word	0x20000000
 80003fc:	20000020 	.word	0x20000020

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	2600      	movs	r6, #0
 8000404:	4d0c      	ldr	r5, [pc, #48]	; (8000438 <__libc_init_array+0x38>)
 8000406:	4c0d      	ldr	r4, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	2600      	movs	r6, #0
 8000412:	f000 f819 	bl	8000448 <_init>
 8000416:	4d0a      	ldr	r5, [pc, #40]	; (8000440 <__libc_init_array+0x40>)
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <__libc_init_array+0x44>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	00b3      	lsls	r3, r6, #2
 8000426:	58eb      	ldr	r3, [r5, r3]
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	00b3      	lsls	r3, r6, #2
 8000430:	58eb      	ldr	r3, [r5, r3]
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	08000460 	.word	0x08000460
 800043c:	08000460 	.word	0x08000460
 8000440:	08000460 	.word	0x08000460
 8000444:	08000464 	.word	0x08000464

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
