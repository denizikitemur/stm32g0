
lab4soru3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000069c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000784  08000784  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000784  08000784  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000784  08000784  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800078c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000790  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000790  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002666  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000888  00000000  00000000  00022692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000208  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013de3  00000000  00000000  00023378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024da  00000000  00000000  0003715b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e37  00000000  00000000  00039635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba46c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000710  00000000  00000000  000ba4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000740 	.word	0x08000740

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000740 	.word	0x08000740

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <setSSDDigit>:
	DIGIT_2_P -> ODR &= ~DIGIT_2;
	DIGIT_3_P -> ODR &= ~DIGIT_3;
	DIGIT_4_P -> ODR &= ~DIGIT_4;
}

void setSSDDigit(uint8_t digit) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	0002      	movs	r2, r0
 800021c:	1dfb      	adds	r3, r7, #7
 800021e:	701a      	strb	r2, [r3, #0]

	// önce hepsini kapat

	// **** //

	switch(digit) {
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b04      	cmp	r3, #4
 8000226:	d022      	beq.n	800026e <setSSDDigit+0x5a>
 8000228:	dc28      	bgt.n	800027c <setSSDDigit+0x68>
 800022a:	2b03      	cmp	r3, #3
 800022c:	d015      	beq.n	800025a <setSSDDigit+0x46>
 800022e:	dc25      	bgt.n	800027c <setSSDDigit+0x68>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d002      	beq.n	800023a <setSSDDigit+0x26>
 8000234:	2b02      	cmp	r3, #2
 8000236:	d009      	beq.n	800024c <setSSDDigit+0x38>
		break;
	case 4:
		DIGIT_4_P -> ODR |= DIGIT_4;
		break;
	default:
		break;
 8000238:	e020      	b.n	800027c <setSSDDigit+0x68>
		DIGIT_1_P -> ODR |= DIGIT_1;
 800023a:	23a0      	movs	r3, #160	; 0xa0
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	695a      	ldr	r2, [r3, #20]
 8000240:	23a0      	movs	r3, #160	; 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	430a      	orrs	r2, r1
 8000248:	615a      	str	r2, [r3, #20]
		break;
 800024a:	e018      	b.n	800027e <setSSDDigit+0x6a>
		DIGIT_2_P -> ODR |= DIGIT_2;
 800024c:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <setSSDDigit+0x74>)
 800024e:	695a      	ldr	r2, [r3, #20]
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <setSSDDigit+0x74>)
 8000252:	2108      	movs	r1, #8
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
		break;
 8000258:	e011      	b.n	800027e <setSSDDigit+0x6a>
		DIGIT_3_P -> ODR |= DIGIT_3;
 800025a:	23a0      	movs	r3, #160	; 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	23a0      	movs	r3, #160	; 0xa0
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	00c9      	lsls	r1, r1, #3
 8000268:	430a      	orrs	r2, r1
 800026a:	615a      	str	r2, [r3, #20]
		break;
 800026c:	e007      	b.n	800027e <setSSDDigit+0x6a>
		DIGIT_4_P -> ODR |= DIGIT_4;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <setSSDDigit+0x74>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <setSSDDigit+0x74>)
 8000274:	2102      	movs	r1, #2
 8000276:	430a      	orrs	r2, r1
 8000278:	615a      	str	r2, [r3, #20]
		break;
 800027a:	e000      	b.n	800027e <setSSDDigit+0x6a>
		break;
 800027c:	46c0      	nop			; (mov r8, r8)
	}
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	50000400 	.word	0x50000400

0800028c <dispNumberDigitInSSD>:

void dispNumberDigitInSSD(uint8_t zeroToTen, uint8_t SSDDigit) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	1c0a      	adds	r2, r1, #0
 800029c:	701a      	strb	r2, [r3, #0]
	setSSDDigit(SSDDigit);
 800029e:	1dbb      	adds	r3, r7, #6
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffb6 	bl	8000214 <setSSDDigit>

	SEGMENT_P -> ODR |= SSD_CLEAR;
 80002a8:	23a0      	movs	r3, #160	; 0xa0
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	23a0      	movs	r3, #160	; 0xa0
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	4939      	ldr	r1, [pc, #228]	; (8000398 <dispNumberDigitInSSD+0x10c>)
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
	switch(zeroToTen){
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b0a      	cmp	r3, #10
 80002be:	d867      	bhi.n	8000390 <dispNumberDigitInSSD+0x104>
 80002c0:	009a      	lsls	r2, r3, #2
 80002c2:	4b36      	ldr	r3, [pc, #216]	; (800039c <dispNumberDigitInSSD+0x110>)
 80002c4:	18d3      	adds	r3, r2, r3
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	469f      	mov	pc, r3
	case 0:
		SEGMENT_P -> ODR &= SSD_ZERO;
 80002ca:	23a0      	movs	r3, #160	; 0xa0
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	695a      	ldr	r2, [r3, #20]
 80002d0:	23a0      	movs	r3, #160	; 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	4932      	ldr	r1, [pc, #200]	; (80003a0 <dispNumberDigitInSSD+0x114>)
 80002d6:	400a      	ands	r2, r1
 80002d8:	615a      	str	r2, [r3, #20]
		break;
 80002da:	e059      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 1:
		SEGMENT_P -> ODR &= SSD_ONE;
 80002dc:	23a0      	movs	r3, #160	; 0xa0
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	695a      	ldr	r2, [r3, #20]
 80002e2:	23a0      	movs	r3, #160	; 0xa0
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	492f      	ldr	r1, [pc, #188]	; (80003a4 <dispNumberDigitInSSD+0x118>)
 80002e8:	400a      	ands	r2, r1
 80002ea:	615a      	str	r2, [r3, #20]
		break;
 80002ec:	e050      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 2:
		SEGMENT_P -> ODR &= SSD_TWO;
 80002ee:	23a0      	movs	r3, #160	; 0xa0
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	23a0      	movs	r3, #160	; 0xa0
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	492b      	ldr	r1, [pc, #172]	; (80003a8 <dispNumberDigitInSSD+0x11c>)
 80002fa:	400a      	ands	r2, r1
 80002fc:	615a      	str	r2, [r3, #20]
		break;
 80002fe:	e047      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 3:
		SEGMENT_P -> ODR &= SSD_THREE;
 8000300:	23a0      	movs	r3, #160	; 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	695a      	ldr	r2, [r3, #20]
 8000306:	23a0      	movs	r3, #160	; 0xa0
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	4928      	ldr	r1, [pc, #160]	; (80003ac <dispNumberDigitInSSD+0x120>)
 800030c:	400a      	ands	r2, r1
 800030e:	615a      	str	r2, [r3, #20]
		break;
 8000310:	e03e      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 4:
		SEGMENT_P -> ODR &= SSD_FOUR;
 8000312:	23a0      	movs	r3, #160	; 0xa0
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	23a0      	movs	r3, #160	; 0xa0
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	4924      	ldr	r1, [pc, #144]	; (80003b0 <dispNumberDigitInSSD+0x124>)
 800031e:	400a      	ands	r2, r1
 8000320:	615a      	str	r2, [r3, #20]
		break;
 8000322:	e035      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 5:
		SEGMENT_P -> ODR &= SSD_FIVE;
 8000324:	23a0      	movs	r3, #160	; 0xa0
 8000326:	05db      	lsls	r3, r3, #23
 8000328:	695a      	ldr	r2, [r3, #20]
 800032a:	23a0      	movs	r3, #160	; 0xa0
 800032c:	05db      	lsls	r3, r3, #23
 800032e:	4921      	ldr	r1, [pc, #132]	; (80003b4 <dispNumberDigitInSSD+0x128>)
 8000330:	400a      	ands	r2, r1
 8000332:	615a      	str	r2, [r3, #20]
		break;
 8000334:	e02c      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 6:
		SEGMENT_P -> ODR &= SSD_SIX;
 8000336:	23a0      	movs	r3, #160	; 0xa0
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	23a0      	movs	r3, #160	; 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	491d      	ldr	r1, [pc, #116]	; (80003b8 <dispNumberDigitInSSD+0x12c>)
 8000342:	400a      	ands	r2, r1
 8000344:	615a      	str	r2, [r3, #20]
		break;
 8000346:	e023      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 7:
		SEGMENT_P -> ODR &= SSD_SEVEN;
 8000348:	23a0      	movs	r3, #160	; 0xa0
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	23a0      	movs	r3, #160	; 0xa0
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	491a      	ldr	r1, [pc, #104]	; (80003bc <dispNumberDigitInSSD+0x130>)
 8000354:	400a      	ands	r2, r1
 8000356:	615a      	str	r2, [r3, #20]
		break;
 8000358:	e01a      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 8:
		SEGMENT_P -> ODR &= SSD_EIGHT;
 800035a:	23a0      	movs	r3, #160	; 0xa0
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	695a      	ldr	r2, [r3, #20]
 8000360:	23a0      	movs	r3, #160	; 0xa0
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	4916      	ldr	r1, [pc, #88]	; (80003c0 <dispNumberDigitInSSD+0x134>)
 8000366:	400a      	ands	r2, r1
 8000368:	615a      	str	r2, [r3, #20]
		break;
 800036a:	e011      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 9:
		SEGMENT_P -> ODR &= SSD_NINE;
 800036c:	23a0      	movs	r3, #160	; 0xa0
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	23a0      	movs	r3, #160	; 0xa0
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	4913      	ldr	r1, [pc, #76]	; (80003c4 <dispNumberDigitInSSD+0x138>)
 8000378:	400a      	ands	r2, r1
 800037a:	615a      	str	r2, [r3, #20]
		break;
 800037c:	e008      	b.n	8000390 <dispNumberDigitInSSD+0x104>
	case 10:
		SEGMENT_P -> ODR &= SSD_M_HYPEN;
 800037e:	23a0      	movs	r3, #160	; 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	23a0      	movs	r3, #160	; 0xa0
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	490f      	ldr	r1, [pc, #60]	; (80003c8 <dispNumberDigitInSSD+0x13c>)
 800038a:	400a      	ands	r2, r1
 800038c:	615a      	str	r2, [r3, #20]
	}
}
 800038e:	e7ff      	b.n	8000390 <dispNumberDigitInSSD+0x104>
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b002      	add	sp, #8
 8000396:	bd80      	pop	{r7, pc}
 8000398:	00001873 	.word	0x00001873
 800039c:	08000758 	.word	0x08000758
 80003a0:	0000e7ac 	.word	0x0000e7ac
 80003a4:	0000effd 	.word	0x0000effd
 80003a8:	0000f79c 	.word	0x0000f79c
 80003ac:	0000ef9c 	.word	0x0000ef9c
 80003b0:	0000efcd 	.word	0x0000efcd
 80003b4:	0000ef8e 	.word	0x0000ef8e
 80003b8:	0000e78e 	.word	0x0000e78e
 80003bc:	0000effc 	.word	0x0000effc
 80003c0:	0000e78c 	.word	0x0000e78c
 80003c4:	0000ef8c 	.word	0x0000ef8c
 80003c8:	0000ffdf 	.word	0x0000ffdf

080003cc <setRCCForSSD>:
		delay(DELAY_FOR_SSD);
}


// PINLERE GORE AYARLAMAN LAZIM
void setRCCForSSD() {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	// A ve B pinlerini aç
	RCC -> IOPENR |= (3U);
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <setRCCForSSD+0x18>)
 80003d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <setRCCForSSD+0x18>)
 80003d6:	2103      	movs	r1, #3
 80003d8:	430a      	orrs	r2, r1
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000

080003e8 <setMODERForSSD>:

// PINLERE GORE AYARLAMAN LAZIM
void setMODERForSSD() {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	// A için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx 01 01 01 xx xx 01 01 01 01 xx xx 01 01  lazım
	// 00 00 00	01 01 01 00 00 01 01 01 01 00 00 01 01 = 0x1505505  orlamak için
	// 11 11 11	01 01 01 11 11 01 01 01 01 11 11 01 01 = 0xFD5F55F5 andlemek için
	GPIOA -> MODER |= (uint32_t) (0x1505505);
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <setMODERForSSD+0x44>)
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER &= (uint32_t) (0xFD5F55F5);
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	23a0      	movs	r3, #160	; 0xa0
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	490a      	ldr	r1, [pc, #40]	; (8000430 <setMODERForSSD+0x48>)
 8000408:	400a      	ands	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
	// B için (SADECE SSD PINLERI)
	// 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
	// xx xx xx xx xx xx xx xx xx xx xx xx 01 xx 01 xx
	// 	  								   01 00 01 00 = 0x44 orlamak için
	// 11 11 11 11 11 11 11 11 11 11 11 11 01 11 01 11 = 0xFFFFFF77 andlemek için
	GPIOB -> MODER |= (uint32_t) (0x44);
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <setMODERForSSD+0x4c>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <setMODERForSSD+0x4c>)
 8000412:	2144      	movs	r1, #68	; 0x44
 8000414:	430a      	orrs	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER &= (uint32_t) (0xFFFFFF77);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <setMODERForSSD+0x4c>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <setMODERForSSD+0x4c>)
 800041e:	2188      	movs	r1, #136	; 0x88
 8000420:	438a      	bics	r2, r1
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	01505505 	.word	0x01505505
 8000430:	fd5f55f5 	.word	0xfd5f55f5
 8000434:	50000400 	.word	0x50000400

08000438 <EXTI0_1_IRQHandler>:

volatile enum MODE currentMode = mode0;

void delayForModes(volatile enum MODE);

void EXTI0_1_IRQHandler() {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	// doWorkForButton
	switch(currentMode) {
 800043c:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <EXTI0_1_IRQHandler+0x94>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d021      	beq.n	800048a <EXTI0_1_IRQHandler+0x52>
 8000446:	4a21      	ldr	r2, [pc, #132]	; (80004cc <EXTI0_1_IRQHandler+0x94>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d834      	bhi.n	80004b6 <EXTI0_1_IRQHandler+0x7e>
 800044c:	4a20      	ldr	r2, [pc, #128]	; (80004d0 <EXTI0_1_IRQHandler+0x98>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d01f      	beq.n	8000492 <EXTI0_1_IRQHandler+0x5a>
 8000452:	4a1f      	ldr	r2, [pc, #124]	; (80004d0 <EXTI0_1_IRQHandler+0x98>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d82e      	bhi.n	80004b6 <EXTI0_1_IRQHandler+0x7e>
 8000458:	4a1e      	ldr	r2, [pc, #120]	; (80004d4 <EXTI0_1_IRQHandler+0x9c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d01d      	beq.n	800049a <EXTI0_1_IRQHandler+0x62>
 800045e:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <EXTI0_1_IRQHandler+0x9c>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d828      	bhi.n	80004b6 <EXTI0_1_IRQHandler+0x7e>
 8000464:	22fa      	movs	r2, #250	; 0xfa
 8000466:	0192      	lsls	r2, r2, #6
 8000468:	4293      	cmp	r3, r2
 800046a:	d01b      	beq.n	80004a4 <EXTI0_1_IRQHandler+0x6c>
 800046c:	22fa      	movs	r2, #250	; 0xfa
 800046e:	0192      	lsls	r2, r2, #6
 8000470:	4293      	cmp	r3, r2
 8000472:	d820      	bhi.n	80004b6 <EXTI0_1_IRQHandler+0x7e>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d004      	beq.n	8000482 <EXTI0_1_IRQHandler+0x4a>
 8000478:	22c8      	movs	r2, #200	; 0xc8
 800047a:	00d2      	lsls	r2, r2, #3
 800047c:	4293      	cmp	r3, r2
 800047e:	d016      	beq.n	80004ae <EXTI0_1_IRQHandler+0x76>
 8000480:	e019      	b.n	80004b6 <EXTI0_1_IRQHandler+0x7e>
		case mode0:
			currentMode = mode1;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 8000484:	4a11      	ldr	r2, [pc, #68]	; (80004cc <EXTI0_1_IRQHandler+0x94>)
 8000486:	601a      	str	r2, [r3, #0]
			break;
 8000488:	e015      	b.n	80004b6 <EXTI0_1_IRQHandler+0x7e>

		case mode1:
			currentMode = mode2;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <EXTI0_1_IRQHandler+0x98>)
 800048e:	601a      	str	r2, [r3, #0]
			break;
 8000490:	e011      	b.n	80004b6 <EXTI0_1_IRQHandler+0x7e>

		case mode2:
			currentMode = mode3;
 8000492:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 8000494:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <EXTI0_1_IRQHandler+0x9c>)
 8000496:	601a      	str	r2, [r3, #0]
			break;
 8000498:	e00d      	b.n	80004b6 <EXTI0_1_IRQHandler+0x7e>

		case mode3:
			currentMode = mode4;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 800049c:	22fa      	movs	r2, #250	; 0xfa
 800049e:	0192      	lsls	r2, r2, #6
 80004a0:	601a      	str	r2, [r3, #0]
			break;
 80004a2:	e008      	b.n	80004b6 <EXTI0_1_IRQHandler+0x7e>

		case mode4:
			currentMode = mode5;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 80004a6:	22c8      	movs	r2, #200	; 0xc8
 80004a8:	00d2      	lsls	r2, r2, #3
 80004aa:	601a      	str	r2, [r3, #0]
			break;
 80004ac:	e003      	b.n	80004b6 <EXTI0_1_IRQHandler+0x7e>

		case mode5:
			currentMode = mode0;
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <EXTI0_1_IRQHandler+0x90>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
			break;
 80004b4:	46c0      	nop			; (mov r8, r8)
	}
	// ***** //

	EXTI -> RPR1 |= (1U);
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <EXTI0_1_IRQHandler+0xa0>)
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <EXTI0_1_IRQHandler+0xa0>)
 80004bc:	2101      	movs	r1, #1
 80004be:	430a      	orrs	r2, r1
 80004c0:	60da      	str	r2, [r3, #12]
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000020 	.word	0x20000020
 80004cc:	00186a00 	.word	0x00186a00
 80004d0:	000c3500 	.word	0x000c3500
 80004d4:	00027100 	.word	0x00027100
 80004d8:	40021800 	.word	0x40021800

080004dc <main>:

int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	/* SET RCC */
	// button -> PB0
	RCC -> IOPENR |= (1U);
 80004e2:	4b4a      	ldr	r3, [pc, #296]	; (800060c <main+0x130>)
 80004e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e6:	4b49      	ldr	r3, [pc, #292]	; (800060c <main+0x130>)
 80004e8:	2101      	movs	r1, #1
 80004ea:	430a      	orrs	r2, r1
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
	// **** //
	/* SET MODER */
	// 01 xx xx xx 00 olmalı
	// 10 00 00 00 11 => 515
	GPIOB -> MODER &= ~515U;
 80004ee:	4b48      	ldr	r3, [pc, #288]	; (8000610 <main+0x134>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b47      	ldr	r3, [pc, #284]	; (8000610 <main+0x134>)
 80004f4:	4947      	ldr	r1, [pc, #284]	; (8000614 <main+0x138>)
 80004f6:	400a      	ands	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
	// 01 00 00 00 00 =>
	GPIOB -> MODER |= (1U << 2 * 4);
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <main+0x134>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b44      	ldr	r3, [pc, #272]	; (8000610 <main+0x134>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0049      	lsls	r1, r1, #1
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
	// **** //
	GPIOB -> PUPDR |= (2U << 0*2);
 8000508:	4b41      	ldr	r3, [pc, #260]	; (8000610 <main+0x134>)
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	4b40      	ldr	r3, [pc, #256]	; (8000610 <main+0x134>)
 800050e:	2102      	movs	r1, #2
 8000510:	430a      	orrs	r2, r1
 8000512:	60da      	str	r2, [r3, #12]
	/* External Interrupt ayarları */
	// rising edge'de yakalamak istediğim için RTSR1
	// PA0 yani 0. porta bağlı olduğu için 0. portu birledik.
	EXTI -> RTSR1 |= (1U << 0);
 8000514:	4b40      	ldr	r3, [pc, #256]	; (8000618 <main+0x13c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <main+0x13c>)
 800051a:	2101      	movs	r1, #1
 800051c:	430a      	orrs	r2, r1
 800051e:	601a      	str	r2, [r3, #0]
	EXTI -> EXTICR[0] &= ~(3U);
 8000520:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <main+0x13c>)
 8000522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000524:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <main+0x13c>)
 8000526:	2103      	movs	r1, #3
 8000528:	438a      	bics	r2, r1
 800052a:	661a      	str	r2, [r3, #96]	; 0x60
	EXTI -> IMR1 |= (1U);
 800052c:	4a3a      	ldr	r2, [pc, #232]	; (8000618 <main+0x13c>)
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	58d3      	ldr	r3, [r2, r3]
 8000532:	4939      	ldr	r1, [pc, #228]	; (8000618 <main+0x13c>)
 8000534:	2201      	movs	r2, #1
 8000536:	4313      	orrs	r3, r2
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	508b      	str	r3, [r1, r2]
	NVIC_SetPriority(EXTI0_1_IRQn, 0);
 800053c:	2100      	movs	r1, #0
 800053e:	2005      	movs	r0, #5
 8000540:	f7ff fdfa 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000544:	2005      	movs	r0, #5
 8000546:	f7ff fddd 	bl	8000104 <__NVIC_EnableIRQ>
	setRCCForSSD();
 800054a:	f7ff ff3f 	bl	80003cc <setRCCForSSD>
	setMODERForSSD();
 800054e:	f7ff ff4b 	bl	80003e8 <setMODERForSSD>
	digitsSSD[0] = 0;
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <main+0x140>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
	digitsSSD[1] = 0;
 8000558:	4b30      	ldr	r3, [pc, #192]	; (800061c <main+0x140>)
 800055a:	2200      	movs	r2, #0
 800055c:	705a      	strb	r2, [r3, #1]
	digitsSSD[2] = 0;
 800055e:	4b2f      	ldr	r3, [pc, #188]	; (800061c <main+0x140>)
 8000560:	2200      	movs	r2, #0
 8000562:	709a      	strb	r2, [r3, #2]
	digitsSSD[3] = 0;
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <main+0x140>)
 8000566:	2200      	movs	r2, #0
 8000568:	70da      	strb	r2, [r3, #3]

	int val;

	while(1){
		 for(int l = 2; l >= 0; l-- ){
 800056a:	2302      	movs	r3, #2
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	e049      	b.n	8000604 <main+0x128>
			 dispNumberDigitInSSD(l, (uint8_t) 1);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2101      	movs	r1, #1
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fe88 	bl	800028c <dispNumberDigitInSSD>
			 delayForModes(currentMode);
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <main+0x144>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	0018      	movs	r0, r3
 8000582:	f000 f84f 	bl	8000624 <delayForModes>
			 for(int k = 4; k >= 0; k-- ){
 8000586:	2304      	movs	r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	e035      	b.n	80005f8 <main+0x11c>
				 dispNumberDigitInSSD(k, (uint8_t) 2);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff fe7a 	bl	800028c <dispNumberDigitInSSD>
				 delayForModes(currentMode);
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <main+0x144>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	0018      	movs	r0, r3
 800059e:	f000 f841 	bl	8000624 <delayForModes>
				for(int j = 5; j >= 0; j-- ){
 80005a2:	2305      	movs	r3, #5
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e021      	b.n	80005ec <main+0x110>
					dispNumberDigitInSSD(j, (uint8_t) 3);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2103      	movs	r1, #3
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff fe6c 	bl	800028c <dispNumberDigitInSSD>
					delayForModes(currentMode);
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <main+0x144>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 f833 	bl	8000624 <delayForModes>
					for(int i = 9; i >= 0; i-- ){
 80005be:	2309      	movs	r3, #9
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	e00d      	b.n	80005e0 <main+0x104>
					dispNumberDigitInSSD(i, (uint8_t) 4);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2104      	movs	r1, #4
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff fe5e 	bl	800028c <dispNumberDigitInSSD>
					delayForModes(currentMode);
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0x144>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 f825 	bl	8000624 <delayForModes>
					for(int i = 9; i >= 0; i-- ){
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	daee      	bge.n	80005c4 <main+0xe8>
				for(int j = 5; j >= 0; j-- ){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dada      	bge.n	80005a8 <main+0xcc>
			 for(int k = 4; k >= 0; k-- ){
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dac6      	bge.n	800058c <main+0xb0>
		 for(int l = 2; l >= 0; l-- ){
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3b01      	subs	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	dab2      	bge.n	8000570 <main+0x94>
 800060a:	e7ae      	b.n	800056a <main+0x8e>
 800060c:	40021000 	.word	0x40021000
 8000610:	50000400 	.word	0x50000400
 8000614:	fffffdfc 	.word	0xfffffdfc
 8000618:	40021800 	.word	0x40021800
 800061c:	20000024 	.word	0x20000024
 8000620:	20000020 	.word	0x20000020

08000624 <delayForModes>:
			}
		 }
		}
    return 0;
}
void delayForModes(volatile enum MODE mode) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	 for(volatile uint32_t s = mode; s > 0; s--) {}
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <delayForModes+0x14>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3b01      	subs	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f9      	bne.n	8000632 <delayForModes+0xe>
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f832 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000684:	f7ff fff7 	bl	8000676 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f000 f823 	bl	80006f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006b2:	f7ff ff13 	bl	80004dc <main>

080006b6 <LoopForever>:

LoopForever:
  b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006c4:	0800078c 	.word	0x0800078c
  ldr r2, =_sbss
 80006c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006cc:	2000002c 	.word	0x2000002c

080006d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_IRQHandler>
	...

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x1c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	001a      	movs	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	18d2      	adds	r2, r2, r3
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_IncTick+0x20>)
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000028 	.word	0x20000028

080006f8 <__libc_init_array>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	2600      	movs	r6, #0
 80006fc:	4d0c      	ldr	r5, [pc, #48]	; (8000730 <__libc_init_array+0x38>)
 80006fe:	4c0d      	ldr	r4, [pc, #52]	; (8000734 <__libc_init_array+0x3c>)
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	42a6      	cmp	r6, r4
 8000706:	d109      	bne.n	800071c <__libc_init_array+0x24>
 8000708:	2600      	movs	r6, #0
 800070a:	f000 f819 	bl	8000740 <_init>
 800070e:	4d0a      	ldr	r5, [pc, #40]	; (8000738 <__libc_init_array+0x40>)
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <__libc_init_array+0x44>)
 8000712:	1b64      	subs	r4, r4, r5
 8000714:	10a4      	asrs	r4, r4, #2
 8000716:	42a6      	cmp	r6, r4
 8000718:	d105      	bne.n	8000726 <__libc_init_array+0x2e>
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	00b3      	lsls	r3, r6, #2
 800071e:	58eb      	ldr	r3, [r5, r3]
 8000720:	4798      	blx	r3
 8000722:	3601      	adds	r6, #1
 8000724:	e7ee      	b.n	8000704 <__libc_init_array+0xc>
 8000726:	00b3      	lsls	r3, r6, #2
 8000728:	58eb      	ldr	r3, [r5, r3]
 800072a:	4798      	blx	r3
 800072c:	3601      	adds	r6, #1
 800072e:	e7f2      	b.n	8000716 <__libc_init_array+0x1e>
 8000730:	08000784 	.word	0x08000784
 8000734:	08000784 	.word	0x08000784
 8000738:	08000784 	.word	0x08000784
 800073c:	08000788 	.word	0x08000788

08000740 <_init>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000746:	bc08      	pop	{r3}
 8000748:	469e      	mov	lr, r3
 800074a:	4770      	bx	lr

0800074c <_fini>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000752:	bc08      	pop	{r3}
 8000754:	469e      	mov	lr, r3
 8000756:	4770      	bx	lr
